#ifndef AVSOFT_DRV_3DMGX335_H
#define AVSOFT_DRV_3DMGX335_H

#include "../drv_serial/drv_serial.h"
#include <cstdint>

// DEFINES
#define INS_SYNC_BYTE_1             0x75
#define INS_SYNC_BYTE_2             0x65

#define CHECKSUM_BYTES              0x02
#define INS_MAX_HEAD_REQUEST        0x30    // ARBITRARY NUMBER - 48

#define INS_GPS_ON  true
#define INS_GPS_OFF false

#define INS_BASIC_DESC_SET          0x01
#define INS_SETUP_DESC_SET          0x0C
#define INS_AHRS_DESC_SET           0x80
#define INS_GPS_DESC_SET            0x81

#define INS_SCL_ACC_DATA_LEN        0x0E
#define INS_SCL_ACC_DESC            0x04

#define INS_SCL_GYR_DATA_LEN        0x0E
#define INS_SCL_GYR_DESC            0x05

#define INS_SCL_MAG_DATA_LEN        0x0E
#define INS_SCL_MAG_DESC            0x06

#define INS_QUATERNION_DATA_LEN     0x12
#define INS_QUATERNION_DESC         0x0A

// COMMAND DEFINES
#define INS_PING_CMD                {0x75,0x65,0x01,0x02,0x02,0x01,0xE0,0xC6}
#define INS_PING_RSP                {0x75,0x65,0x01,0x04,0x04,0xF1,0x01,0x00,0xD5,0x6A}

#define INS_SET_IDLE_CMD            {0x75,0x65,0x01,0x02,0x02,0x02,0xE1,0xC7}
#define INS_SET_IDLE_RSP            {0x75,0x65,0x01,0x04,0x04,0xF1,0x02,0x00,0xD6,0x6C}

#define INS_RESUME_CMD              {0x75,0x65,0x01,0x02,0x02,0x06,0xE5,0xCB}
#define INS_RESUME_RSP              {0x75,0x65,0x01,0x04,0x04,0xF1,0x06,0x00,0xDA,0x74}

#define INS_AHRS_STREAM_ON_CMD      {0x75,0x65,0x0C,0x05,0x05,0x11,0x01,0x01,0x01,0x04,0x1A}
#define INS_AHRS_STREAM_OFF_CMD     {0x75,0x65,0x0C,0x05,0x05,0x11,0x01,0x01,0x00,0x03,0x19}

#define INS_GPS_STREAM_ON_CMD       {0x75,0x65,0x0C,0x05,0x05,0x11,0x01,0x02,0x01,0x04,0x1B}
#define INS_GPS_STREAM_OFF_CMD      {0x75,0x65,0x0C,0x05,0x05,0x11,0x01,0x02,0x00,0x04,0x1B}

#define INS_AHRS_GPS_STREAM_OFF_CMD {0x75,0x65,0x0C,0x0A,0x05,0x11,0x01,0x01,0x00,0x05,0x11,0x01,0x02,0x00,0x21,0xC3}
#define INS_AHRS_GPS_STREAM_OFF_RSP {0x75,0x65,0x0C,0x08,0x04,0xF1,0x11,0x00,0x04,0xF1,0x11,0x00,0xFA,0xB5}

#define INS_AHRS_GPS_STREAM_ON_CMD  {0x75,0x65,0x0C,0x0A,0x05,0x11,0x01,0x01,0x01,0x05,0x11,0x01,0x02,0x01,0x23,0xCA}
#define INS_AHRS_GPS_STREAM_ON_RSP  {0x75,0x65,0x0C,0x08,0x04,0xF1,0x11,0x00,0x04,0xF1,0x11,0x00,0xFA,0xB5}

// CONFIGS
#define INS_AHRS_TIMESTAMP_CMD      {0x75,0x65,0x0C,0x08,0x08,0x36,0x01,0x01,0x00,0x00,0x00,0x00,0x2E,0x58}
#define INS_AHRS_TIMESTAMP_RSP      {0x75,0x65,0x0C,0x04,0x04,0xF1,0x36,0x00,0x15,0x16}

#define INS_GPS_DYNAMIC_MODE_2G_CMD {0x75,0x65,0x0C,0x04,0x04,0x34,0x01,0x07,0x2A,0x7C}
#define INS_GPS_DYNAMIC_MODE_2G_RSP {0x75,0x65,0x0C,0x04,0x04,0xF1,0x34,0x00,0x13,0x12}

#define INS_AHRS_SIG_COND_CONFIG_CMD     {0x75,0x65,0x0C,0x10,0x10,0x35,0x01,0x00,0x0A,0x10,0x03,0x0E,0x11,0x00,0x0A,0x00,0x0A,0x01,0x00,0x00,0x8D,0x67}

#define INS_AHRS_MSG_FMT_CMD        {0x75,0x65,0x0C,0x16,0x16,0x08,0x01,0x06,0x0E,0x00,0x0A,0x04,0x00,0x0A,0x05,0x00,0x0A,0x06,0x00,0x0A,0x0A,0x00,0x0A,0x0F,0x00,0x0A,0x93,0xFC}
#define INS_AHRS_MSG_FMT_READ       {0x75,0x65,0x0C,0x04,0x04,0x08,0x02,0x00,0xF8,0xF3}

#define INS_GPS_MSG_CONFIG_CMD      {0x75,0x65,0x0C,0x10,0x10,0x09,0x01,0x04,0x03,0x00,0x04,0x05,0x00,0x04,0x09,0x00,0x04,0x0B,0x00,0x04,0x40,0x54}
#define INS_GPS_MSG_CONFIG_READ     {0x75,0x65,0x0C,0x03,0x03,0x09,0x02,0xF7,0xF6}

#define INS_AHRS_MSG_FMT_SAVE_CMD   {0x75,0x65,0x0C,0x04,0x04,0x08,0x03,0x00,0xF9,0xF5}
#define INS_GPS_MSG_FMT_SAVE_CMD    {0x75,0x65,0x0C,0x04,0x04,0x09,0x03,0x00,0xFA,0xF8}
// DATA READING
#define INS_AHRS_SCL_ACC_VEC        {0x80,0x0E,0x0E,0x04}
#define INS_AHRS_SCL_GYR_VEC        {0x80,0x0E,0x0E,0x05}
#define INS_AHRS_SCL_MAG_VEC        {0x80,0x0E,0x0E,0x06}

#define INS_AHRS_QUATERNION_VEC     {0x80,0x12,0x12,0x0A}

#define INS_AHRS_INTERNAL_TS        {0x80,0x06,0x06,0x0E}
#define INS_AHRS_BEACONED_TS        {0x80,0x0B,0x0B,0x0F}

// GPS
#define INS_GPS_LLH_POS             {0x81,0x2C,0x2C,0x03}
#define INS_GPS_ECEF_POS            {0x81,0x20,0x20,0x04}
#define INS_GPS_NED_VEL             {0x81,0x24,0x24,0x05}
#define INS_GPS_ECEF_VEL            {0x81,0x14,0x14,0x06}

#define INS_GPS_DOP_DATA            {0x81,0x02,0x20,0x07}
#define INS_GPS_UTC_TIME            {0x81,0x0F,0x0F,0x08}
#define INS_GPS_TIME                {0x81,0x0E,0x0E,0x09}
#define INS_GPS_FIX_INFORMATION     {0x81,0x08,0x08,0x0B}

typedef struct msg_3dmCmd {

} msg_3dmCmd_t;

typedef struct msg_3dmRsp {

} msg_3dmRsp_t;

class ahrs3dm335 : public drv_serial
{
public:

	ahrs3dm335();
	~ahrs3dm335();

	bool start();
	bool exit();

	bool getConfig();
	bool setConfig();
	bool isAvailable();
	bool setIdle();
	bool setResume();
	bool setStreamOn();
	bool setStreamOff();
	bool setGpsOn();
	bool setGpsOff();

	void readResponse(uint8_t _data[],int32_t _len);

	bool accessData();
	float getTimeStamp();

	float getXacc();
	float getYacc();
	float getZacc();

	float getXgyr();
	float getYgyr();
	float getZgyr();

	float getXmag();
	float getYmag();
	float getZmag();

	// GET ATTITUDE
	void getQuaternion(float _quater[4]);
	void getEulerAngles(float _euler[3]);

	// GET GPS
	double getGpsTimeStamp();
	double getGpsLat();
	double getGpsLon();
	double getGpsMsl();
	double getGpsGndVel();
	void   getGpsVelNed(double _vned[3]);
	double getGpsHeading();

	// SET ERRORS
	bool getErrFromFile();
	bool setBiasErrAcc();
	bool setBiasErrGyr();
	bool setScalingErr();
	void computeCheckSum(uint8_t _data[],int32_t _len);
	bool getHeader();
	bool configAhrs();
	bool configGps();

	bool saveAhrsFmt();
	bool saveGpsFmt();

	uint8_t *scanMsg(uint8_t _data[],
	uint8_t _flen,
	uint8_t _fdesc,
	int32_t _len);

private:

	// DATA
	uint8_t mp_msgBuffer[100] = {0};
	uint8_t mp_chkByte1 = 0;
	uint8_t mp_chkByte2 = 0;

	// AHRS DATA
	const float mp_gravity = 9.80665;

	bool mp_ahrsOn     = true;
	float mp_accScl[3] = {0.0,0.0,0.0};
	float mp_gyrScl[3] = {0.0,0.0,0.0};
	float mp_magScl[3] = {0.0,0.0,0.0};

	float mp_quater[4] = {0.0,0.0,0.0,0.0};
	float mp_euler[3]  = {0.0,0.0,0.0};

	float mp_timeStamp;
	double mp_beaconTimeStamp;
	uint8_t mp_beaconStatus;

	// GPS DATA
	bool mp_gpsOn       = true;

	double mp_gpsLat        = 0;
	double mp_gpsLon        = 0;
	double mp_gpsMsl        = 0;

	float mp_gpsVelNed[3]  = {0.0,0.0,0.0};
	float mp_gpsGndVel     = 0.0;
	float mp_gpsHeading    = 0.0;
	double mp_gpsTimeStamp  = 0.0;

	uint8_t mp_fixType      = 0;
	uint8_t mp_satUsed      = 0;
	uint16_t mp_validFlag   = 0;

	// METHODS
	void computeQuatToEuler();

	// UTILITY
	float convertBytesToFloat(uint8_t _msb, uint8_t _byte2, uint8_t _byte3, uint8_t _lsb);
	double convertBytesToDouble(uint8_t _msb, uint8_t _byte2, uint8_t _byte3, uint8_t _byte4, uint8_t _byte5, uint8_t _byte6, uint8_t _byte7, uint8_t _lsb);
	float convertBytesToTime(uint8_t _msb, uint8_t _byte2, uint8_t _byte3, uint8_t _lsb);
	uint32_t convertBytesToUint32(uint8_t _msb, uint8_t _byte2, uint8_t _byte3, uint8_t _lsb);
	uint16_t convertBytesToUint16(uint8_t _msb, uint8_t _lsb);
};

#endif // AVSOFT_DRV_3DMGX335_H
