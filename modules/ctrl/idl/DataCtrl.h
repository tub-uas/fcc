// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DataCtrl.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _DATACTRL_H_
#define _DATACTRL_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(DataCtrl_SOURCE)
#define DataCtrl_DllAPI __declspec( dllexport )
#else
#define DataCtrl_DllAPI __declspec( dllimport )
#endif // DataCtrl_SOURCE
#else
#define DataCtrl_DllAPI
#endif
#else
#define DataCtrl_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


/*!
 * @brief This class represents the structure DataCtrl defined by the user in the IDL file.
 * @ingroup DATACTRL
 */
class DataCtrl
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DataCtrl();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DataCtrl();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DataCtrl that will be copied.
     */
    eProsima_user_DllExport DataCtrl(const DataCtrl &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DataCtrl that will be copied.
     */
    eProsima_user_DllExport DataCtrl(DataCtrl &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DataCtrl that will be copied.
     */
    eProsima_user_DllExport DataCtrl& operator=(const DataCtrl &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DataCtrl that will be copied.
     */
    eProsima_user_DllExport DataCtrl& operator=(DataCtrl &&x);

    /*!
     * @brief This function sets a value in member time
     * @param _time New value for member time
     */
    eProsima_user_DllExport void time(uint64_t _time);

    /*!
     * @brief This function returns the value of member time
     * @return Value of member time
     */
    eProsima_user_DllExport uint64_t time() const;

    /*!
     * @brief This function returns a reference to member time
     * @return Reference to member time
     */
    eProsima_user_DllExport uint64_t& time();

    /*!
     * @brief This function sets a value in member xi
     * @param _xi New value for member xi
     */
    eProsima_user_DllExport void xi(float _xi);

    /*!
     * @brief This function returns the value of member xi
     * @return Value of member xi
     */
    eProsima_user_DllExport float xi() const;

    /*!
     * @brief This function returns a reference to member xi
     * @return Reference to member xi
     */
    eProsima_user_DllExport float& xi();

    /*!
     * @brief This function sets a value in member eta
     * @param _eta New value for member eta
     */
    eProsima_user_DllExport void eta(float _eta);

    /*!
     * @brief This function returns the value of member eta
     * @return Value of member eta
     */
    eProsima_user_DllExport float eta() const;

    /*!
     * @brief This function returns a reference to member eta
     * @return Reference to member eta
     */
    eProsima_user_DllExport float& eta();

    /*!
     * @brief This function sets a value in member zeta
     * @param _zeta New value for member zeta
     */
    eProsima_user_DllExport void zeta(float _zeta);

    /*!
     * @brief This function returns the value of member zeta
     * @return Value of member zeta
     */
    eProsima_user_DllExport float zeta() const;

    /*!
     * @brief This function returns a reference to member zeta
     * @return Reference to member zeta
     */
    eProsima_user_DllExport float& zeta();

    /*!
     * @brief This function sets a value in member etaT
     * @param _etaT New value for member etaT
     */
    eProsima_user_DllExport void etaT(float _etaT);

    /*!
     * @brief This function returns the value of member etaT
     * @return Value of member etaT
     */
    eProsima_user_DllExport float etaT() const;

    /*!
     * @brief This function returns a reference to member etaT
     * @return Reference to member etaT
     */
    eProsima_user_DllExport float& etaT();

    /*!
     * @brief This function sets a value in member etaF
     * @param _etaF New value for member etaF
     */
    eProsima_user_DllExport void etaF(float _etaF);

    /*!
     * @brief This function returns the value of member etaF
     * @return Value of member etaF
     */
    eProsima_user_DllExport float etaF() const;

    /*!
     * @brief This function returns a reference to member etaF
     * @return Reference to member etaF
     */
    eProsima_user_DllExport float& etaF();

    /*!
     * @brief This function sets a value in member fltMode
     * @param _fltMode New value for member fltMode
     */
    eProsima_user_DllExport void fltMode(uint16_t _fltMode);

    /*!
     * @brief This function returns the value of member fltMode
     * @return Value of member fltMode
     */
    eProsima_user_DllExport uint16_t fltMode() const;

    /*!
     * @brief This function returns a reference to member fltMode
     * @return Reference to member fltMode
     */
    eProsima_user_DllExport uint16_t& fltMode();

    /*!
     * @brief This function sets a value in member fltFunc
     * @param _fltFunc New value for member fltFunc
     */
    eProsima_user_DllExport void fltFunc(uint16_t _fltFunc);

    /*!
     * @brief This function returns the value of member fltFunc
     * @return Value of member fltFunc
     */
    eProsima_user_DllExport uint16_t fltFunc() const;

    /*!
     * @brief This function returns a reference to member fltFunc
     * @return Reference to member fltFunc
     */
    eProsima_user_DllExport uint16_t& fltFunc();

    /*!
     * @brief This function sets a value in member alive
     * @param _alive New value for member alive
     */
    eProsima_user_DllExport void alive(bool _alive);

    /*!
     * @brief This function returns the value of member alive
     * @return Value of member alive
     */
    eProsima_user_DllExport bool alive() const;

    /*!
     * @brief This function returns a reference to member alive
     * @return Reference to member alive
     */
    eProsima_user_DllExport bool& alive();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const DataCtrl& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    uint64_t m_time;
    float m_xi;
    float m_eta;
    float m_zeta;
    float m_etaT;
    float m_etaF;
    uint16_t m_fltMode;
    uint16_t m_fltFunc;
    bool m_alive;
};

#endif // _DATACTRL_H_