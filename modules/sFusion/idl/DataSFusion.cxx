// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DataSFusion.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "DataSFusion.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

DataSFusion::DataSFusion()
{
    // m_time com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4e718207
    m_time = 0;
    // m_p com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1d371b2d
    m_p = 0.0;
    // m_q com.eprosima.idl.parser.typecode.PrimitiveTypeCode@543c6f6d
    m_q = 0.0;
    // m_r com.eprosima.idl.parser.typecode.PrimitiveTypeCode@13eb8acf
    m_r = 0.0;
    // m_a_x com.eprosima.idl.parser.typecode.PrimitiveTypeCode@51c8530f
    m_a_x = 0.0;
    // m_a_y com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7403c468
    m_a_y = 0.0;
    // m_a_z com.eprosima.idl.parser.typecode.PrimitiveTypeCode@43738a82
    m_a_z = 0.0;
    // m_true_airspeed com.eprosima.idl.parser.typecode.PrimitiveTypeCode@c81cdd1
    m_true_airspeed = 0.0;
    // m_indicated_airspeed com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1fc2b765
    m_indicated_airspeed = 0.0;
    // m_density com.eprosima.idl.parser.typecode.PrimitiveTypeCode@75881071
    m_density = 0.0;
    // m_dynamic_pressure com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2a70a3d8
    m_dynamic_pressure = 0.0;
    // m_barometric_pressure com.eprosima.idl.parser.typecode.PrimitiveTypeCode@289d1c02
    m_barometric_pressure = 0.0;
    // m_height_rate com.eprosima.idl.parser.typecode.PrimitiveTypeCode@22eeefeb
    m_height_rate = 0.0;
    // m_height com.eprosima.idl.parser.typecode.PrimitiveTypeCode@17d0685f
    m_height = 0.0;
    // m_ssa com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3891771e
    m_ssa = 0.0;
    // m_aoa com.eprosima.idl.parser.typecode.PrimitiveTypeCode@396e2f39
    m_aoa = 0.0;
    // m_gamma com.eprosima.idl.parser.typecode.PrimitiveTypeCode@42607a4f
    m_gamma = 0.0;
    // m_phi com.eprosima.idl.parser.typecode.PrimitiveTypeCode@782663d3
    m_phi = 0.0;
    // m_the com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1990a65e
    m_the = 0.0;
    // m_psi com.eprosima.idl.parser.typecode.PrimitiveTypeCode@64485a47
    m_psi = 0.0;
    // m_latitude com.eprosima.idl.parser.typecode.PrimitiveTypeCode@25bbf683
    m_latitude = 0.0;
    // m_longitude com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6ec8211c
    m_longitude = 0.0;
    // m_posN com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7276c8cd
    m_posN = 0.0;
    // m_posE com.eprosima.idl.parser.typecode.PrimitiveTypeCode@544a2ea6
    m_posE = 0.0;
    // m_posD com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2e3fc542
    m_posD = 0.0;
    // m_speedN com.eprosima.idl.parser.typecode.PrimitiveTypeCode@150c158
    m_speedN = 0.0;
    // m_speedE com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4524411f
    m_speedE = 0.0;
    // m_speedD com.eprosima.idl.parser.typecode.PrimitiveTypeCode@401e7803
    m_speedD = 0.0;
    // m_windN com.eprosima.idl.parser.typecode.PrimitiveTypeCode@10dba097
    m_windN = 0.0;
    // m_windE com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1786f9d5
    m_windE = 0.0;
    // m_windD com.eprosima.idl.parser.typecode.PrimitiveTypeCode@704d6e83
    m_windD = 0.0;
    // m_alive com.eprosima.idl.parser.typecode.PrimitiveTypeCode@43a0cee9
    m_alive = false;

}

DataSFusion::~DataSFusion()
{
































}

DataSFusion::DataSFusion(
        const DataSFusion& x)
{
    m_time = x.m_time;
    m_p = x.m_p;
    m_q = x.m_q;
    m_r = x.m_r;
    m_a_x = x.m_a_x;
    m_a_y = x.m_a_y;
    m_a_z = x.m_a_z;
    m_true_airspeed = x.m_true_airspeed;
    m_indicated_airspeed = x.m_indicated_airspeed;
    m_density = x.m_density;
    m_dynamic_pressure = x.m_dynamic_pressure;
    m_barometric_pressure = x.m_barometric_pressure;
    m_height_rate = x.m_height_rate;
    m_height = x.m_height;
    m_ssa = x.m_ssa;
    m_aoa = x.m_aoa;
    m_gamma = x.m_gamma;
    m_phi = x.m_phi;
    m_the = x.m_the;
    m_psi = x.m_psi;
    m_latitude = x.m_latitude;
    m_longitude = x.m_longitude;
    m_posN = x.m_posN;
    m_posE = x.m_posE;
    m_posD = x.m_posD;
    m_speedN = x.m_speedN;
    m_speedE = x.m_speedE;
    m_speedD = x.m_speedD;
    m_windN = x.m_windN;
    m_windE = x.m_windE;
    m_windD = x.m_windD;
    m_alive = x.m_alive;
}

DataSFusion::DataSFusion(
        DataSFusion&& x)
{
    m_time = x.m_time;
    m_p = x.m_p;
    m_q = x.m_q;
    m_r = x.m_r;
    m_a_x = x.m_a_x;
    m_a_y = x.m_a_y;
    m_a_z = x.m_a_z;
    m_true_airspeed = x.m_true_airspeed;
    m_indicated_airspeed = x.m_indicated_airspeed;
    m_density = x.m_density;
    m_dynamic_pressure = x.m_dynamic_pressure;
    m_barometric_pressure = x.m_barometric_pressure;
    m_height_rate = x.m_height_rate;
    m_height = x.m_height;
    m_ssa = x.m_ssa;
    m_aoa = x.m_aoa;
    m_gamma = x.m_gamma;
    m_phi = x.m_phi;
    m_the = x.m_the;
    m_psi = x.m_psi;
    m_latitude = x.m_latitude;
    m_longitude = x.m_longitude;
    m_posN = x.m_posN;
    m_posE = x.m_posE;
    m_posD = x.m_posD;
    m_speedN = x.m_speedN;
    m_speedE = x.m_speedE;
    m_speedD = x.m_speedD;
    m_windN = x.m_windN;
    m_windE = x.m_windE;
    m_windD = x.m_windD;
    m_alive = x.m_alive;
}

DataSFusion& DataSFusion::operator =(
        const DataSFusion& x)
{

    m_time = x.m_time;
    m_p = x.m_p;
    m_q = x.m_q;
    m_r = x.m_r;
    m_a_x = x.m_a_x;
    m_a_y = x.m_a_y;
    m_a_z = x.m_a_z;
    m_true_airspeed = x.m_true_airspeed;
    m_indicated_airspeed = x.m_indicated_airspeed;
    m_density = x.m_density;
    m_dynamic_pressure = x.m_dynamic_pressure;
    m_barometric_pressure = x.m_barometric_pressure;
    m_height_rate = x.m_height_rate;
    m_height = x.m_height;
    m_ssa = x.m_ssa;
    m_aoa = x.m_aoa;
    m_gamma = x.m_gamma;
    m_phi = x.m_phi;
    m_the = x.m_the;
    m_psi = x.m_psi;
    m_latitude = x.m_latitude;
    m_longitude = x.m_longitude;
    m_posN = x.m_posN;
    m_posE = x.m_posE;
    m_posD = x.m_posD;
    m_speedN = x.m_speedN;
    m_speedE = x.m_speedE;
    m_speedD = x.m_speedD;
    m_windN = x.m_windN;
    m_windE = x.m_windE;
    m_windD = x.m_windD;
    m_alive = x.m_alive;

    return *this;
}

DataSFusion& DataSFusion::operator =(
        DataSFusion&& x)
{

    m_time = x.m_time;
    m_p = x.m_p;
    m_q = x.m_q;
    m_r = x.m_r;
    m_a_x = x.m_a_x;
    m_a_y = x.m_a_y;
    m_a_z = x.m_a_z;
    m_true_airspeed = x.m_true_airspeed;
    m_indicated_airspeed = x.m_indicated_airspeed;
    m_density = x.m_density;
    m_dynamic_pressure = x.m_dynamic_pressure;
    m_barometric_pressure = x.m_barometric_pressure;
    m_height_rate = x.m_height_rate;
    m_height = x.m_height;
    m_ssa = x.m_ssa;
    m_aoa = x.m_aoa;
    m_gamma = x.m_gamma;
    m_phi = x.m_phi;
    m_the = x.m_the;
    m_psi = x.m_psi;
    m_latitude = x.m_latitude;
    m_longitude = x.m_longitude;
    m_posN = x.m_posN;
    m_posE = x.m_posE;
    m_posD = x.m_posD;
    m_speedN = x.m_speedN;
    m_speedE = x.m_speedE;
    m_speedD = x.m_speedD;
    m_windN = x.m_windN;
    m_windE = x.m_windE;
    m_windD = x.m_windD;
    m_alive = x.m_alive;

    return *this;
}

size_t DataSFusion::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t DataSFusion::getCdrSerializedSize(
        const DataSFusion& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void DataSFusion::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_time;
    scdr << m_p;
    scdr << m_q;
    scdr << m_r;
    scdr << m_a_x;
    scdr << m_a_y;
    scdr << m_a_z;
    scdr << m_true_airspeed;
    scdr << m_indicated_airspeed;
    scdr << m_density;
    scdr << m_dynamic_pressure;
    scdr << m_barometric_pressure;
    scdr << m_height_rate;
    scdr << m_height;
    scdr << m_ssa;
    scdr << m_aoa;
    scdr << m_gamma;
    scdr << m_phi;
    scdr << m_the;
    scdr << m_psi;
    scdr << m_latitude;
    scdr << m_longitude;
    scdr << m_posN;
    scdr << m_posE;
    scdr << m_posD;
    scdr << m_speedN;
    scdr << m_speedE;
    scdr << m_speedD;
    scdr << m_windN;
    scdr << m_windE;
    scdr << m_windD;
    scdr << m_alive;

}

void DataSFusion::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_time;
    dcdr >> m_p;
    dcdr >> m_q;
    dcdr >> m_r;
    dcdr >> m_a_x;
    dcdr >> m_a_y;
    dcdr >> m_a_z;
    dcdr >> m_true_airspeed;
    dcdr >> m_indicated_airspeed;
    dcdr >> m_density;
    dcdr >> m_dynamic_pressure;
    dcdr >> m_barometric_pressure;
    dcdr >> m_height_rate;
    dcdr >> m_height;
    dcdr >> m_ssa;
    dcdr >> m_aoa;
    dcdr >> m_gamma;
    dcdr >> m_phi;
    dcdr >> m_the;
    dcdr >> m_psi;
    dcdr >> m_latitude;
    dcdr >> m_longitude;
    dcdr >> m_posN;
    dcdr >> m_posE;
    dcdr >> m_posD;
    dcdr >> m_speedN;
    dcdr >> m_speedE;
    dcdr >> m_speedD;
    dcdr >> m_windN;
    dcdr >> m_windE;
    dcdr >> m_windD;
    dcdr >> m_alive;
}

/*!
 * @brief This function sets a value in member time
 * @param _time New value for member time
 */
void DataSFusion::time(
        uint64_t _time)
{
    m_time = _time;
}

/*!
 * @brief This function returns the value of member time
 * @return Value of member time
 */
uint64_t DataSFusion::time() const
{
    return m_time;
}

/*!
 * @brief This function returns a reference to member time
 * @return Reference to member time
 */
uint64_t& DataSFusion::time()
{
    return m_time;
}

/*!
 * @brief This function sets a value in member p
 * @param _p New value for member p
 */
void DataSFusion::p(
        double _p)
{
    m_p = _p;
}

/*!
 * @brief This function returns the value of member p
 * @return Value of member p
 */
double DataSFusion::p() const
{
    return m_p;
}

/*!
 * @brief This function returns a reference to member p
 * @return Reference to member p
 */
double& DataSFusion::p()
{
    return m_p;
}

/*!
 * @brief This function sets a value in member q
 * @param _q New value for member q
 */
void DataSFusion::q(
        double _q)
{
    m_q = _q;
}

/*!
 * @brief This function returns the value of member q
 * @return Value of member q
 */
double DataSFusion::q() const
{
    return m_q;
}

/*!
 * @brief This function returns a reference to member q
 * @return Reference to member q
 */
double& DataSFusion::q()
{
    return m_q;
}

/*!
 * @brief This function sets a value in member r
 * @param _r New value for member r
 */
void DataSFusion::r(
        double _r)
{
    m_r = _r;
}

/*!
 * @brief This function returns the value of member r
 * @return Value of member r
 */
double DataSFusion::r() const
{
    return m_r;
}

/*!
 * @brief This function returns a reference to member r
 * @return Reference to member r
 */
double& DataSFusion::r()
{
    return m_r;
}

/*!
 * @brief This function sets a value in member a_x
 * @param _a_x New value for member a_x
 */
void DataSFusion::a_x(
        double _a_x)
{
    m_a_x = _a_x;
}

/*!
 * @brief This function returns the value of member a_x
 * @return Value of member a_x
 */
double DataSFusion::a_x() const
{
    return m_a_x;
}

/*!
 * @brief This function returns a reference to member a_x
 * @return Reference to member a_x
 */
double& DataSFusion::a_x()
{
    return m_a_x;
}

/*!
 * @brief This function sets a value in member a_y
 * @param _a_y New value for member a_y
 */
void DataSFusion::a_y(
        double _a_y)
{
    m_a_y = _a_y;
}

/*!
 * @brief This function returns the value of member a_y
 * @return Value of member a_y
 */
double DataSFusion::a_y() const
{
    return m_a_y;
}

/*!
 * @brief This function returns a reference to member a_y
 * @return Reference to member a_y
 */
double& DataSFusion::a_y()
{
    return m_a_y;
}

/*!
 * @brief This function sets a value in member a_z
 * @param _a_z New value for member a_z
 */
void DataSFusion::a_z(
        double _a_z)
{
    m_a_z = _a_z;
}

/*!
 * @brief This function returns the value of member a_z
 * @return Value of member a_z
 */
double DataSFusion::a_z() const
{
    return m_a_z;
}

/*!
 * @brief This function returns a reference to member a_z
 * @return Reference to member a_z
 */
double& DataSFusion::a_z()
{
    return m_a_z;
}

/*!
 * @brief This function sets a value in member true_airspeed
 * @param _true_airspeed New value for member true_airspeed
 */
void DataSFusion::true_airspeed(
        double _true_airspeed)
{
    m_true_airspeed = _true_airspeed;
}

/*!
 * @brief This function returns the value of member true_airspeed
 * @return Value of member true_airspeed
 */
double DataSFusion::true_airspeed() const
{
    return m_true_airspeed;
}

/*!
 * @brief This function returns a reference to member true_airspeed
 * @return Reference to member true_airspeed
 */
double& DataSFusion::true_airspeed()
{
    return m_true_airspeed;
}

/*!
 * @brief This function sets a value in member indicated_airspeed
 * @param _indicated_airspeed New value for member indicated_airspeed
 */
void DataSFusion::indicated_airspeed(
        double _indicated_airspeed)
{
    m_indicated_airspeed = _indicated_airspeed;
}

/*!
 * @brief This function returns the value of member indicated_airspeed
 * @return Value of member indicated_airspeed
 */
double DataSFusion::indicated_airspeed() const
{
    return m_indicated_airspeed;
}

/*!
 * @brief This function returns a reference to member indicated_airspeed
 * @return Reference to member indicated_airspeed
 */
double& DataSFusion::indicated_airspeed()
{
    return m_indicated_airspeed;
}

/*!
 * @brief This function sets a value in member density
 * @param _density New value for member density
 */
void DataSFusion::density(
        double _density)
{
    m_density = _density;
}

/*!
 * @brief This function returns the value of member density
 * @return Value of member density
 */
double DataSFusion::density() const
{
    return m_density;
}

/*!
 * @brief This function returns a reference to member density
 * @return Reference to member density
 */
double& DataSFusion::density()
{
    return m_density;
}

/*!
 * @brief This function sets a value in member dynamic_pressure
 * @param _dynamic_pressure New value for member dynamic_pressure
 */
void DataSFusion::dynamic_pressure(
        double _dynamic_pressure)
{
    m_dynamic_pressure = _dynamic_pressure;
}

/*!
 * @brief This function returns the value of member dynamic_pressure
 * @return Value of member dynamic_pressure
 */
double DataSFusion::dynamic_pressure() const
{
    return m_dynamic_pressure;
}

/*!
 * @brief This function returns a reference to member dynamic_pressure
 * @return Reference to member dynamic_pressure
 */
double& DataSFusion::dynamic_pressure()
{
    return m_dynamic_pressure;
}

/*!
 * @brief This function sets a value in member barometric_pressure
 * @param _barometric_pressure New value for member barometric_pressure
 */
void DataSFusion::barometric_pressure(
        double _barometric_pressure)
{
    m_barometric_pressure = _barometric_pressure;
}

/*!
 * @brief This function returns the value of member barometric_pressure
 * @return Value of member barometric_pressure
 */
double DataSFusion::barometric_pressure() const
{
    return m_barometric_pressure;
}

/*!
 * @brief This function returns a reference to member barometric_pressure
 * @return Reference to member barometric_pressure
 */
double& DataSFusion::barometric_pressure()
{
    return m_barometric_pressure;
}

/*!
 * @brief This function sets a value in member height_rate
 * @param _height_rate New value for member height_rate
 */
void DataSFusion::height_rate(
        double _height_rate)
{
    m_height_rate = _height_rate;
}

/*!
 * @brief This function returns the value of member height_rate
 * @return Value of member height_rate
 */
double DataSFusion::height_rate() const
{
    return m_height_rate;
}

/*!
 * @brief This function returns a reference to member height_rate
 * @return Reference to member height_rate
 */
double& DataSFusion::height_rate()
{
    return m_height_rate;
}

/*!
 * @brief This function sets a value in member height
 * @param _height New value for member height
 */
void DataSFusion::height(
        double _height)
{
    m_height = _height;
}

/*!
 * @brief This function returns the value of member height
 * @return Value of member height
 */
double DataSFusion::height() const
{
    return m_height;
}

/*!
 * @brief This function returns a reference to member height
 * @return Reference to member height
 */
double& DataSFusion::height()
{
    return m_height;
}

/*!
 * @brief This function sets a value in member ssa
 * @param _ssa New value for member ssa
 */
void DataSFusion::ssa(
        double _ssa)
{
    m_ssa = _ssa;
}

/*!
 * @brief This function returns the value of member ssa
 * @return Value of member ssa
 */
double DataSFusion::ssa() const
{
    return m_ssa;
}

/*!
 * @brief This function returns a reference to member ssa
 * @return Reference to member ssa
 */
double& DataSFusion::ssa()
{
    return m_ssa;
}

/*!
 * @brief This function sets a value in member aoa
 * @param _aoa New value for member aoa
 */
void DataSFusion::aoa(
        double _aoa)
{
    m_aoa = _aoa;
}

/*!
 * @brief This function returns the value of member aoa
 * @return Value of member aoa
 */
double DataSFusion::aoa() const
{
    return m_aoa;
}

/*!
 * @brief This function returns a reference to member aoa
 * @return Reference to member aoa
 */
double& DataSFusion::aoa()
{
    return m_aoa;
}

/*!
 * @brief This function sets a value in member gamma
 * @param _gamma New value for member gamma
 */
void DataSFusion::gamma(
        double _gamma)
{
    m_gamma = _gamma;
}

/*!
 * @brief This function returns the value of member gamma
 * @return Value of member gamma
 */
double DataSFusion::gamma() const
{
    return m_gamma;
}

/*!
 * @brief This function returns a reference to member gamma
 * @return Reference to member gamma
 */
double& DataSFusion::gamma()
{
    return m_gamma;
}

/*!
 * @brief This function sets a value in member phi
 * @param _phi New value for member phi
 */
void DataSFusion::phi(
        double _phi)
{
    m_phi = _phi;
}

/*!
 * @brief This function returns the value of member phi
 * @return Value of member phi
 */
double DataSFusion::phi() const
{
    return m_phi;
}

/*!
 * @brief This function returns a reference to member phi
 * @return Reference to member phi
 */
double& DataSFusion::phi()
{
    return m_phi;
}

/*!
 * @brief This function sets a value in member the
 * @param _the New value for member the
 */
void DataSFusion::the(
        double _the)
{
    m_the = _the;
}

/*!
 * @brief This function returns the value of member the
 * @return Value of member the
 */
double DataSFusion::the() const
{
    return m_the;
}

/*!
 * @brief This function returns a reference to member the
 * @return Reference to member the
 */
double& DataSFusion::the()
{
    return m_the;
}

/*!
 * @brief This function sets a value in member psi
 * @param _psi New value for member psi
 */
void DataSFusion::psi(
        double _psi)
{
    m_psi = _psi;
}

/*!
 * @brief This function returns the value of member psi
 * @return Value of member psi
 */
double DataSFusion::psi() const
{
    return m_psi;
}

/*!
 * @brief This function returns a reference to member psi
 * @return Reference to member psi
 */
double& DataSFusion::psi()
{
    return m_psi;
}

/*!
 * @brief This function sets a value in member latitude
 * @param _latitude New value for member latitude
 */
void DataSFusion::latitude(
        double _latitude)
{
    m_latitude = _latitude;
}

/*!
 * @brief This function returns the value of member latitude
 * @return Value of member latitude
 */
double DataSFusion::latitude() const
{
    return m_latitude;
}

/*!
 * @brief This function returns a reference to member latitude
 * @return Reference to member latitude
 */
double& DataSFusion::latitude()
{
    return m_latitude;
}

/*!
 * @brief This function sets a value in member longitude
 * @param _longitude New value for member longitude
 */
void DataSFusion::longitude(
        double _longitude)
{
    m_longitude = _longitude;
}

/*!
 * @brief This function returns the value of member longitude
 * @return Value of member longitude
 */
double DataSFusion::longitude() const
{
    return m_longitude;
}

/*!
 * @brief This function returns a reference to member longitude
 * @return Reference to member longitude
 */
double& DataSFusion::longitude()
{
    return m_longitude;
}

/*!
 * @brief This function sets a value in member posN
 * @param _posN New value for member posN
 */
void DataSFusion::posN(
        double _posN)
{
    m_posN = _posN;
}

/*!
 * @brief This function returns the value of member posN
 * @return Value of member posN
 */
double DataSFusion::posN() const
{
    return m_posN;
}

/*!
 * @brief This function returns a reference to member posN
 * @return Reference to member posN
 */
double& DataSFusion::posN()
{
    return m_posN;
}

/*!
 * @brief This function sets a value in member posE
 * @param _posE New value for member posE
 */
void DataSFusion::posE(
        double _posE)
{
    m_posE = _posE;
}

/*!
 * @brief This function returns the value of member posE
 * @return Value of member posE
 */
double DataSFusion::posE() const
{
    return m_posE;
}

/*!
 * @brief This function returns a reference to member posE
 * @return Reference to member posE
 */
double& DataSFusion::posE()
{
    return m_posE;
}

/*!
 * @brief This function sets a value in member posD
 * @param _posD New value for member posD
 */
void DataSFusion::posD(
        double _posD)
{
    m_posD = _posD;
}

/*!
 * @brief This function returns the value of member posD
 * @return Value of member posD
 */
double DataSFusion::posD() const
{
    return m_posD;
}

/*!
 * @brief This function returns a reference to member posD
 * @return Reference to member posD
 */
double& DataSFusion::posD()
{
    return m_posD;
}

/*!
 * @brief This function sets a value in member speedN
 * @param _speedN New value for member speedN
 */
void DataSFusion::speedN(
        double _speedN)
{
    m_speedN = _speedN;
}

/*!
 * @brief This function returns the value of member speedN
 * @return Value of member speedN
 */
double DataSFusion::speedN() const
{
    return m_speedN;
}

/*!
 * @brief This function returns a reference to member speedN
 * @return Reference to member speedN
 */
double& DataSFusion::speedN()
{
    return m_speedN;
}

/*!
 * @brief This function sets a value in member speedE
 * @param _speedE New value for member speedE
 */
void DataSFusion::speedE(
        double _speedE)
{
    m_speedE = _speedE;
}

/*!
 * @brief This function returns the value of member speedE
 * @return Value of member speedE
 */
double DataSFusion::speedE() const
{
    return m_speedE;
}

/*!
 * @brief This function returns a reference to member speedE
 * @return Reference to member speedE
 */
double& DataSFusion::speedE()
{
    return m_speedE;
}

/*!
 * @brief This function sets a value in member speedD
 * @param _speedD New value for member speedD
 */
void DataSFusion::speedD(
        double _speedD)
{
    m_speedD = _speedD;
}

/*!
 * @brief This function returns the value of member speedD
 * @return Value of member speedD
 */
double DataSFusion::speedD() const
{
    return m_speedD;
}

/*!
 * @brief This function returns a reference to member speedD
 * @return Reference to member speedD
 */
double& DataSFusion::speedD()
{
    return m_speedD;
}

/*!
 * @brief This function sets a value in member windN
 * @param _windN New value for member windN
 */
void DataSFusion::windN(
        double _windN)
{
    m_windN = _windN;
}

/*!
 * @brief This function returns the value of member windN
 * @return Value of member windN
 */
double DataSFusion::windN() const
{
    return m_windN;
}

/*!
 * @brief This function returns a reference to member windN
 * @return Reference to member windN
 */
double& DataSFusion::windN()
{
    return m_windN;
}

/*!
 * @brief This function sets a value in member windE
 * @param _windE New value for member windE
 */
void DataSFusion::windE(
        double _windE)
{
    m_windE = _windE;
}

/*!
 * @brief This function returns the value of member windE
 * @return Value of member windE
 */
double DataSFusion::windE() const
{
    return m_windE;
}

/*!
 * @brief This function returns a reference to member windE
 * @return Reference to member windE
 */
double& DataSFusion::windE()
{
    return m_windE;
}

/*!
 * @brief This function sets a value in member windD
 * @param _windD New value for member windD
 */
void DataSFusion::windD(
        double _windD)
{
    m_windD = _windD;
}

/*!
 * @brief This function returns the value of member windD
 * @return Value of member windD
 */
double DataSFusion::windD() const
{
    return m_windD;
}

/*!
 * @brief This function returns a reference to member windD
 * @return Reference to member windD
 */
double& DataSFusion::windD()
{
    return m_windD;
}

/*!
 * @brief This function sets a value in member alive
 * @param _alive New value for member alive
 */
void DataSFusion::alive(
        bool _alive)
{
    m_alive = _alive;
}

/*!
 * @brief This function returns the value of member alive
 * @return Value of member alive
 */
bool DataSFusion::alive() const
{
    return m_alive;
}

/*!
 * @brief This function returns a reference to member alive
 * @return Reference to member alive
 */
bool& DataSFusion::alive()
{
    return m_alive;
}


size_t DataSFusion::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



































    return current_align;
}

bool DataSFusion::isKeyDefined()
{
    return false;
}

void DataSFusion::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
                                    
}
