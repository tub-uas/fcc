// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DataSFusion.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "DataSFusion.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

DataSFusion::DataSFusion()
{
    // m_time com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3b0143d3
    m_time = 0;
    // m_phi com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5a8e6209
    m_phi = 0.0;
    // m_the com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4b4523f8
    m_the = 0.0;
    // m_psi com.eprosima.idl.parser.typecode.PrimitiveTypeCode@731a74c
    m_psi = 0.0;
    // m_p0 com.eprosima.idl.parser.typecode.PrimitiveTypeCode@369f73a2
    m_p0 = 0.0;
    // m_p1 com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1f28c152
    m_p1 = 0.0;
    // m_p2 com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7d907bac
    m_p2 = 0.0;
    // m_p3 com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7791a895
    m_p3 = 0.0;
    // m_press com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3a5ed7a6
    m_press = 0.0;
    // m_temp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6325a3ee
    m_temp = 0.0;
    // m_posN com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1d16f93d
    m_posN = 0.0;
    // m_posE com.eprosima.idl.parser.typecode.PrimitiveTypeCode@67b92f0a
    m_posE = 0.0;
    // m_posD com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2b9627bc
    m_posD = 0.0;
    // m_speedX com.eprosima.idl.parser.typecode.PrimitiveTypeCode@65e2dbf3
    m_speedX = 0.0;
    // m_speedY com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4f970963
    m_speedY = 0.0;
    // m_speedZ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7b49cea0
    m_speedZ = 0.0;
    // m_windX com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6e0e048a
    m_windX = 0.0;
    // m_windY com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5bc79255
    m_windY = 0.0;
    // m_windZ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@47ef968d
    m_windZ = 0.0;
    // m_ssa com.eprosima.idl.parser.typecode.PrimitiveTypeCode@23e028a9
    m_ssa = 0.0;
    // m_aoa com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3dd4520b
    m_aoa = 0.0;
    // m_gamma com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5ae63ade
    m_gamma = 0.0;
    // m_alive com.eprosima.idl.parser.typecode.PrimitiveTypeCode@610694f1
    m_alive = false;

}

DataSFusion::~DataSFusion()
{























}

DataSFusion::DataSFusion(const DataSFusion &x)
{
    m_time = x.m_time;
    m_phi = x.m_phi;
    m_the = x.m_the;
    m_psi = x.m_psi;
    m_p0 = x.m_p0;
    m_p1 = x.m_p1;
    m_p2 = x.m_p2;
    m_p3 = x.m_p3;
    m_press = x.m_press;
    m_temp = x.m_temp;
    m_posN = x.m_posN;
    m_posE = x.m_posE;
    m_posD = x.m_posD;
    m_speedX = x.m_speedX;
    m_speedY = x.m_speedY;
    m_speedZ = x.m_speedZ;
    m_windX = x.m_windX;
    m_windY = x.m_windY;
    m_windZ = x.m_windZ;
    m_ssa = x.m_ssa;
    m_aoa = x.m_aoa;
    m_gamma = x.m_gamma;
    m_alive = x.m_alive;
}

DataSFusion::DataSFusion(DataSFusion &&x)
{
    m_time = x.m_time;
    m_phi = x.m_phi;
    m_the = x.m_the;
    m_psi = x.m_psi;
    m_p0 = x.m_p0;
    m_p1 = x.m_p1;
    m_p2 = x.m_p2;
    m_p3 = x.m_p3;
    m_press = x.m_press;
    m_temp = x.m_temp;
    m_posN = x.m_posN;
    m_posE = x.m_posE;
    m_posD = x.m_posD;
    m_speedX = x.m_speedX;
    m_speedY = x.m_speedY;
    m_speedZ = x.m_speedZ;
    m_windX = x.m_windX;
    m_windY = x.m_windY;
    m_windZ = x.m_windZ;
    m_ssa = x.m_ssa;
    m_aoa = x.m_aoa;
    m_gamma = x.m_gamma;
    m_alive = x.m_alive;
}

DataSFusion& DataSFusion::operator=(const DataSFusion &x)
{

    m_time = x.m_time;
    m_phi = x.m_phi;
    m_the = x.m_the;
    m_psi = x.m_psi;
    m_p0 = x.m_p0;
    m_p1 = x.m_p1;
    m_p2 = x.m_p2;
    m_p3 = x.m_p3;
    m_press = x.m_press;
    m_temp = x.m_temp;
    m_posN = x.m_posN;
    m_posE = x.m_posE;
    m_posD = x.m_posD;
    m_speedX = x.m_speedX;
    m_speedY = x.m_speedY;
    m_speedZ = x.m_speedZ;
    m_windX = x.m_windX;
    m_windY = x.m_windY;
    m_windZ = x.m_windZ;
    m_ssa = x.m_ssa;
    m_aoa = x.m_aoa;
    m_gamma = x.m_gamma;
    m_alive = x.m_alive;

    return *this;
}

DataSFusion& DataSFusion::operator=(DataSFusion &&x)
{

    m_time = x.m_time;
    m_phi = x.m_phi;
    m_the = x.m_the;
    m_psi = x.m_psi;
    m_p0 = x.m_p0;
    m_p1 = x.m_p1;
    m_p2 = x.m_p2;
    m_p3 = x.m_p3;
    m_press = x.m_press;
    m_temp = x.m_temp;
    m_posN = x.m_posN;
    m_posE = x.m_posE;
    m_posD = x.m_posD;
    m_speedX = x.m_speedX;
    m_speedY = x.m_speedY;
    m_speedZ = x.m_speedZ;
    m_windX = x.m_windX;
    m_windY = x.m_windY;
    m_windZ = x.m_windZ;
    m_ssa = x.m_ssa;
    m_aoa = x.m_aoa;
    m_gamma = x.m_gamma;
    m_alive = x.m_alive;

    return *this;
}

size_t DataSFusion::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t DataSFusion::getCdrSerializedSize(const DataSFusion& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void DataSFusion::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_time;
    scdr << m_phi;
    scdr << m_the;
    scdr << m_psi;
    scdr << m_p0;
    scdr << m_p1;
    scdr << m_p2;
    scdr << m_p3;
    scdr << m_press;
    scdr << m_temp;
    scdr << m_posN;
    scdr << m_posE;
    scdr << m_posD;
    scdr << m_speedX;
    scdr << m_speedY;
    scdr << m_speedZ;
    scdr << m_windX;
    scdr << m_windY;
    scdr << m_windZ;
    scdr << m_ssa;
    scdr << m_aoa;
    scdr << m_gamma;
    scdr << m_alive;
}

void DataSFusion::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_time;
    dcdr >> m_phi;
    dcdr >> m_the;
    dcdr >> m_psi;
    dcdr >> m_p0;
    dcdr >> m_p1;
    dcdr >> m_p2;
    dcdr >> m_p3;
    dcdr >> m_press;
    dcdr >> m_temp;
    dcdr >> m_posN;
    dcdr >> m_posE;
    dcdr >> m_posD;
    dcdr >> m_speedX;
    dcdr >> m_speedY;
    dcdr >> m_speedZ;
    dcdr >> m_windX;
    dcdr >> m_windY;
    dcdr >> m_windZ;
    dcdr >> m_ssa;
    dcdr >> m_aoa;
    dcdr >> m_gamma;
    dcdr >> m_alive;
}

/*!
 * @brief This function sets a value in member time
 * @param _time New value for member time
 */
void DataSFusion::time(uint64_t _time)
{
m_time = _time;
}

/*!
 * @brief This function returns the value of member time
 * @return Value of member time
 */
uint64_t DataSFusion::time() const
{
    return m_time;
}

/*!
 * @brief This function returns a reference to member time
 * @return Reference to member time
 */
uint64_t& DataSFusion::time()
{
    return m_time;
}

/*!
 * @brief This function sets a value in member phi
 * @param _phi New value for member phi
 */
void DataSFusion::phi(float _phi)
{
m_phi = _phi;
}

/*!
 * @brief This function returns the value of member phi
 * @return Value of member phi
 */
float DataSFusion::phi() const
{
    return m_phi;
}

/*!
 * @brief This function returns a reference to member phi
 * @return Reference to member phi
 */
float& DataSFusion::phi()
{
    return m_phi;
}

/*!
 * @brief This function sets a value in member the
 * @param _the New value for member the
 */
void DataSFusion::the(float _the)
{
m_the = _the;
}

/*!
 * @brief This function returns the value of member the
 * @return Value of member the
 */
float DataSFusion::the() const
{
    return m_the;
}

/*!
 * @brief This function returns a reference to member the
 * @return Reference to member the
 */
float& DataSFusion::the()
{
    return m_the;
}

/*!
 * @brief This function sets a value in member psi
 * @param _psi New value for member psi
 */
void DataSFusion::psi(float _psi)
{
m_psi = _psi;
}

/*!
 * @brief This function returns the value of member psi
 * @return Value of member psi
 */
float DataSFusion::psi() const
{
    return m_psi;
}

/*!
 * @brief This function returns a reference to member psi
 * @return Reference to member psi
 */
float& DataSFusion::psi()
{
    return m_psi;
}

/*!
 * @brief This function sets a value in member p0
 * @param _p0 New value for member p0
 */
void DataSFusion::p0(float _p0)
{
m_p0 = _p0;
}

/*!
 * @brief This function returns the value of member p0
 * @return Value of member p0
 */
float DataSFusion::p0() const
{
    return m_p0;
}

/*!
 * @brief This function returns a reference to member p0
 * @return Reference to member p0
 */
float& DataSFusion::p0()
{
    return m_p0;
}

/*!
 * @brief This function sets a value in member p1
 * @param _p1 New value for member p1
 */
void DataSFusion::p1(float _p1)
{
m_p1 = _p1;
}

/*!
 * @brief This function returns the value of member p1
 * @return Value of member p1
 */
float DataSFusion::p1() const
{
    return m_p1;
}

/*!
 * @brief This function returns a reference to member p1
 * @return Reference to member p1
 */
float& DataSFusion::p1()
{
    return m_p1;
}

/*!
 * @brief This function sets a value in member p2
 * @param _p2 New value for member p2
 */
void DataSFusion::p2(float _p2)
{
m_p2 = _p2;
}

/*!
 * @brief This function returns the value of member p2
 * @return Value of member p2
 */
float DataSFusion::p2() const
{
    return m_p2;
}

/*!
 * @brief This function returns a reference to member p2
 * @return Reference to member p2
 */
float& DataSFusion::p2()
{
    return m_p2;
}

/*!
 * @brief This function sets a value in member p3
 * @param _p3 New value for member p3
 */
void DataSFusion::p3(float _p3)
{
m_p3 = _p3;
}

/*!
 * @brief This function returns the value of member p3
 * @return Value of member p3
 */
float DataSFusion::p3() const
{
    return m_p3;
}

/*!
 * @brief This function returns a reference to member p3
 * @return Reference to member p3
 */
float& DataSFusion::p3()
{
    return m_p3;
}

/*!
 * @brief This function sets a value in member press
 * @param _press New value for member press
 */
void DataSFusion::press(float _press)
{
m_press = _press;
}

/*!
 * @brief This function returns the value of member press
 * @return Value of member press
 */
float DataSFusion::press() const
{
    return m_press;
}

/*!
 * @brief This function returns a reference to member press
 * @return Reference to member press
 */
float& DataSFusion::press()
{
    return m_press;
}

/*!
 * @brief This function sets a value in member temp
 * @param _temp New value for member temp
 */
void DataSFusion::temp(float _temp)
{
m_temp = _temp;
}

/*!
 * @brief This function returns the value of member temp
 * @return Value of member temp
 */
float DataSFusion::temp() const
{
    return m_temp;
}

/*!
 * @brief This function returns a reference to member temp
 * @return Reference to member temp
 */
float& DataSFusion::temp()
{
    return m_temp;
}

/*!
 * @brief This function sets a value in member posN
 * @param _posN New value for member posN
 */
void DataSFusion::posN(float _posN)
{
m_posN = _posN;
}

/*!
 * @brief This function returns the value of member posN
 * @return Value of member posN
 */
float DataSFusion::posN() const
{
    return m_posN;
}

/*!
 * @brief This function returns a reference to member posN
 * @return Reference to member posN
 */
float& DataSFusion::posN()
{
    return m_posN;
}

/*!
 * @brief This function sets a value in member posE
 * @param _posE New value for member posE
 */
void DataSFusion::posE(float _posE)
{
m_posE = _posE;
}

/*!
 * @brief This function returns the value of member posE
 * @return Value of member posE
 */
float DataSFusion::posE() const
{
    return m_posE;
}

/*!
 * @brief This function returns a reference to member posE
 * @return Reference to member posE
 */
float& DataSFusion::posE()
{
    return m_posE;
}

/*!
 * @brief This function sets a value in member posD
 * @param _posD New value for member posD
 */
void DataSFusion::posD(float _posD)
{
m_posD = _posD;
}

/*!
 * @brief This function returns the value of member posD
 * @return Value of member posD
 */
float DataSFusion::posD() const
{
    return m_posD;
}

/*!
 * @brief This function returns a reference to member posD
 * @return Reference to member posD
 */
float& DataSFusion::posD()
{
    return m_posD;
}

/*!
 * @brief This function sets a value in member speedX
 * @param _speedX New value for member speedX
 */
void DataSFusion::speedX(float _speedX)
{
m_speedX = _speedX;
}

/*!
 * @brief This function returns the value of member speedX
 * @return Value of member speedX
 */
float DataSFusion::speedX() const
{
    return m_speedX;
}

/*!
 * @brief This function returns a reference to member speedX
 * @return Reference to member speedX
 */
float& DataSFusion::speedX()
{
    return m_speedX;
}

/*!
 * @brief This function sets a value in member speedY
 * @param _speedY New value for member speedY
 */
void DataSFusion::speedY(float _speedY)
{
m_speedY = _speedY;
}

/*!
 * @brief This function returns the value of member speedY
 * @return Value of member speedY
 */
float DataSFusion::speedY() const
{
    return m_speedY;
}

/*!
 * @brief This function returns a reference to member speedY
 * @return Reference to member speedY
 */
float& DataSFusion::speedY()
{
    return m_speedY;
}

/*!
 * @brief This function sets a value in member speedZ
 * @param _speedZ New value for member speedZ
 */
void DataSFusion::speedZ(float _speedZ)
{
m_speedZ = _speedZ;
}

/*!
 * @brief This function returns the value of member speedZ
 * @return Value of member speedZ
 */
float DataSFusion::speedZ() const
{
    return m_speedZ;
}

/*!
 * @brief This function returns a reference to member speedZ
 * @return Reference to member speedZ
 */
float& DataSFusion::speedZ()
{
    return m_speedZ;
}

/*!
 * @brief This function sets a value in member windX
 * @param _windX New value for member windX
 */
void DataSFusion::windX(float _windX)
{
m_windX = _windX;
}

/*!
 * @brief This function returns the value of member windX
 * @return Value of member windX
 */
float DataSFusion::windX() const
{
    return m_windX;
}

/*!
 * @brief This function returns a reference to member windX
 * @return Reference to member windX
 */
float& DataSFusion::windX()
{
    return m_windX;
}

/*!
 * @brief This function sets a value in member windY
 * @param _windY New value for member windY
 */
void DataSFusion::windY(float _windY)
{
m_windY = _windY;
}

/*!
 * @brief This function returns the value of member windY
 * @return Value of member windY
 */
float DataSFusion::windY() const
{
    return m_windY;
}

/*!
 * @brief This function returns a reference to member windY
 * @return Reference to member windY
 */
float& DataSFusion::windY()
{
    return m_windY;
}

/*!
 * @brief This function sets a value in member windZ
 * @param _windZ New value for member windZ
 */
void DataSFusion::windZ(float _windZ)
{
m_windZ = _windZ;
}

/*!
 * @brief This function returns the value of member windZ
 * @return Value of member windZ
 */
float DataSFusion::windZ() const
{
    return m_windZ;
}

/*!
 * @brief This function returns a reference to member windZ
 * @return Reference to member windZ
 */
float& DataSFusion::windZ()
{
    return m_windZ;
}

/*!
 * @brief This function sets a value in member ssa
 * @param _ssa New value for member ssa
 */
void DataSFusion::ssa(float _ssa)
{
m_ssa = _ssa;
}

/*!
 * @brief This function returns the value of member ssa
 * @return Value of member ssa
 */
float DataSFusion::ssa() const
{
    return m_ssa;
}

/*!
 * @brief This function returns a reference to member ssa
 * @return Reference to member ssa
 */
float& DataSFusion::ssa()
{
    return m_ssa;
}

/*!
 * @brief This function sets a value in member aoa
 * @param _aoa New value for member aoa
 */
void DataSFusion::aoa(float _aoa)
{
m_aoa = _aoa;
}

/*!
 * @brief This function returns the value of member aoa
 * @return Value of member aoa
 */
float DataSFusion::aoa() const
{
    return m_aoa;
}

/*!
 * @brief This function returns a reference to member aoa
 * @return Reference to member aoa
 */
float& DataSFusion::aoa()
{
    return m_aoa;
}

/*!
 * @brief This function sets a value in member gamma
 * @param _gamma New value for member gamma
 */
void DataSFusion::gamma(float _gamma)
{
m_gamma = _gamma;
}

/*!
 * @brief This function returns the value of member gamma
 * @return Value of member gamma
 */
float DataSFusion::gamma() const
{
    return m_gamma;
}

/*!
 * @brief This function returns a reference to member gamma
 * @return Reference to member gamma
 */
float& DataSFusion::gamma()
{
    return m_gamma;
}

/*!
 * @brief This function sets a value in member alive
 * @param _alive New value for member alive
 */
void DataSFusion::alive(bool _alive)
{
m_alive = _alive;
}

/*!
 * @brief This function returns the value of member alive
 * @return Value of member alive
 */
bool DataSFusion::alive() const
{
    return m_alive;
}

/*!
 * @brief This function returns a reference to member alive
 * @return Reference to member alive
 */
bool& DataSFusion::alive()
{
    return m_alive;
}


size_t DataSFusion::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;


























    return current_align;
}

bool DataSFusion::isKeyDefined()
{
   return false;
}

void DataSFusion::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
}
