// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DataRaiOut.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _DATARAIOUT_H_
#define _DATARAIOUT_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(DataRaiOut_SOURCE)
#define DataRaiOut_DllAPI __declspec( dllexport )
#else
#define DataRaiOut_DllAPI __declspec( dllimport )
#endif // DataRaiOut_SOURCE
#else
#define DataRaiOut_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define DataRaiOut_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure DataRaiOut defined by the user in the IDL file.
 * @ingroup DATARAIOUT
 */
class DataRaiOut
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DataRaiOut();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DataRaiOut();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DataRaiOut that will be copied.
     */
    eProsima_user_DllExport DataRaiOut(
            const DataRaiOut& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DataRaiOut that will be copied.
     */
    eProsima_user_DllExport DataRaiOut(
            DataRaiOut&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DataRaiOut that will be copied.
     */
    eProsima_user_DllExport DataRaiOut& operator =(
            const DataRaiOut& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DataRaiOut that will be copied.
     */
    eProsima_user_DllExport DataRaiOut& operator =(
            DataRaiOut&& x);

    /*!
     * @brief This function sets a value in member time
     * @param _time New value for member time
     */
    eProsima_user_DllExport void time(
            uint64_t _time);

    /*!
     * @brief This function returns the value of member time
     * @return Value of member time
     */
    eProsima_user_DllExport uint64_t time() const;

    /*!
     * @brief This function returns a reference to member time
     * @return Reference to member time
     */
    eProsima_user_DllExport uint64_t& time();

    /*!
     * @brief This function sets a value in member senseTime
     * @param _senseTime New value for member senseTime
     */
    eProsima_user_DllExport void senseTime(
            double _senseTime);

    /*!
     * @brief This function returns the value of member senseTime
     * @return Value of member senseTime
     */
    eProsima_user_DllExport double senseTime() const;

    /*!
     * @brief This function returns a reference to member senseTime
     * @return Reference to member senseTime
     */
    eProsima_user_DllExport double& senseTime();

    /*!
     * @brief This function copies the value in member chnl
     * @param _chnl New value to be copied in member chnl
     */
    eProsima_user_DllExport void chnl(
            const std::array<uint16_t, 12>& _chnl);

    /*!
     * @brief This function moves the value in member chnl
     * @param _chnl New value to be moved in member chnl
     */
    eProsima_user_DllExport void chnl(
            std::array<uint16_t, 12>&& _chnl);

    /*!
     * @brief This function returns a constant reference to member chnl
     * @return Constant reference to member chnl
     */
    eProsima_user_DllExport const std::array<uint16_t, 12>& chnl() const;

    /*!
     * @brief This function returns a reference to member chnl
     * @return Reference to member chnl
     */
    eProsima_user_DllExport std::array<uint16_t, 12>& chnl();
    /*!
     * @brief This function sets a value in member xi_setpoint
     * @param _xi_setpoint New value for member xi_setpoint
     */
    eProsima_user_DllExport void xi_setpoint(
            double _xi_setpoint);

    /*!
     * @brief This function returns the value of member xi_setpoint
     * @return Value of member xi_setpoint
     */
    eProsima_user_DllExport double xi_setpoint() const;

    /*!
     * @brief This function returns a reference to member xi_setpoint
     * @return Reference to member xi_setpoint
     */
    eProsima_user_DllExport double& xi_setpoint();

    /*!
     * @brief This function sets a value in member eta_setpoint
     * @param _eta_setpoint New value for member eta_setpoint
     */
    eProsima_user_DllExport void eta_setpoint(
            double _eta_setpoint);

    /*!
     * @brief This function returns the value of member eta_setpoint
     * @return Value of member eta_setpoint
     */
    eProsima_user_DllExport double eta_setpoint() const;

    /*!
     * @brief This function returns a reference to member eta_setpoint
     * @return Reference to member eta_setpoint
     */
    eProsima_user_DllExport double& eta_setpoint();

    /*!
     * @brief This function sets a value in member zeta_setpoint
     * @param _zeta_setpoint New value for member zeta_setpoint
     */
    eProsima_user_DllExport void zeta_setpoint(
            double _zeta_setpoint);

    /*!
     * @brief This function returns the value of member zeta_setpoint
     * @return Value of member zeta_setpoint
     */
    eProsima_user_DllExport double zeta_setpoint() const;

    /*!
     * @brief This function returns a reference to member zeta_setpoint
     * @return Reference to member zeta_setpoint
     */
    eProsima_user_DllExport double& zeta_setpoint();

    /*!
     * @brief This function sets a value in member throttle_setpoint
     * @param _throttle_setpoint New value for member throttle_setpoint
     */
    eProsima_user_DllExport void throttle_setpoint(
            double _throttle_setpoint);

    /*!
     * @brief This function returns the value of member throttle_setpoint
     * @return Value of member throttle_setpoint
     */
    eProsima_user_DllExport double throttle_setpoint() const;

    /*!
     * @brief This function returns a reference to member throttle_setpoint
     * @return Reference to member throttle_setpoint
     */
    eProsima_user_DllExport double& throttle_setpoint();

    /*!
     * @brief This function sets a value in member flaps_setpoint
     * @param _flaps_setpoint New value for member flaps_setpoint
     */
    eProsima_user_DllExport void flaps_setpoint(
            double _flaps_setpoint);

    /*!
     * @brief This function returns the value of member flaps_setpoint
     * @return Value of member flaps_setpoint
     */
    eProsima_user_DllExport double flaps_setpoint() const;

    /*!
     * @brief This function returns a reference to member flaps_setpoint
     * @return Reference to member flaps_setpoint
     */
    eProsima_user_DllExport double& flaps_setpoint();

    /*!
     * @brief This function sets a value in member flight_mode
     * @param _flight_mode New value for member flight_mode
     */
    eProsima_user_DllExport void flight_mode(
            uint16_t _flight_mode);

    /*!
     * @brief This function returns the value of member flight_mode
     * @return Value of member flight_mode
     */
    eProsima_user_DllExport uint16_t flight_mode() const;

    /*!
     * @brief This function returns a reference to member flight_mode
     * @return Reference to member flight_mode
     */
    eProsima_user_DllExport uint16_t& flight_mode();

    /*!
     * @brief This function sets a value in member flight_fct
     * @param _flight_fct New value for member flight_fct
     */
    eProsima_user_DllExport void flight_fct(
            uint16_t _flight_fct);

    /*!
     * @brief This function returns the value of member flight_fct
     * @return Value of member flight_fct
     */
    eProsima_user_DllExport uint16_t flight_fct() const;

    /*!
     * @brief This function returns a reference to member flight_fct
     * @return Reference to member flight_fct
     */
    eProsima_user_DllExport uint16_t& flight_fct();

    /*!
     * @brief This function sets a value in member alive
     * @param _alive New value for member alive
     */
    eProsima_user_DllExport void alive(
            bool _alive);

    /*!
     * @brief This function returns the value of member alive
     * @return Value of member alive
     */
    eProsima_user_DllExport bool alive() const;

    /*!
     * @brief This function returns a reference to member alive
     * @return Reference to member alive
     */
    eProsima_user_DllExport bool& alive();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const DataRaiOut& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint64_t m_time;
    double m_senseTime;
    std::array<uint16_t, 12> m_chnl;
    double m_xi_setpoint;
    double m_eta_setpoint;
    double m_zeta_setpoint;
    double m_throttle_setpoint;
    double m_flaps_setpoint;
    uint16_t m_flight_mode;
    uint16_t m_flight_fct;
    bool m_alive;
};

#endif // _DATARAIOUT_H_