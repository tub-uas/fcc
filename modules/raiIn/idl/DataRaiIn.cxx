// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DataRaiIn.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "DataRaiIn.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

DataRaiIn::DataRaiIn()
{
    // m_time com.eprosima.idl.parser.typecode.PrimitiveTypeCode@12c8a2c0
    m_time = 0;
    // m_senseTime com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7e0e6aa2
    m_senseTime = 0.0;
    // m_chnl com.eprosima.idl.parser.typecode.ArrayTypeCode@365185bd
    memset(&m_chnl, 0, (12) * 2);
    // m_xi_setpoint com.eprosima.idl.parser.typecode.PrimitiveTypeCode@18bf3d14
    m_xi_setpoint = 0.0;
    // m_eta_setpoint com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4fb64261
    m_eta_setpoint = 0.0;
    // m_zeta_setpoint com.eprosima.idl.parser.typecode.PrimitiveTypeCode@42607a4f
    m_zeta_setpoint = 0.0;
    // m_throttle_setpoint com.eprosima.idl.parser.typecode.PrimitiveTypeCode@782663d3
    m_throttle_setpoint = 0.0;
    // m_flaps_setpoint com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1990a65e
    m_flaps_setpoint = 0.0;
    // m_roll_setpoint com.eprosima.idl.parser.typecode.PrimitiveTypeCode@64485a47
    m_roll_setpoint = 0.0;
    // m_roll_rate_setpoint com.eprosima.idl.parser.typecode.PrimitiveTypeCode@25bbf683
    m_roll_rate_setpoint = 0.0;
    // m_pitch_setpoint com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6ec8211c
    m_pitch_setpoint = 0.0;
    // m_pitch_rate_setpoint com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7276c8cd
    m_pitch_rate_setpoint = 0.0;
    // m_yaw_setpoint com.eprosima.idl.parser.typecode.PrimitiveTypeCode@544a2ea6
    m_yaw_setpoint = 0.0;
    // m_yaw_rate_setpoint com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2e3fc542
    m_yaw_rate_setpoint = 0.0;
    // m_tas_setpoint com.eprosima.idl.parser.typecode.PrimitiveTypeCode@150c158
    m_tas_setpoint = 0.0;
    // m_tas_rate_setpoint com.eprosima.idl.parser.typecode.PrimitiveTypeCode@10dba097
    m_tas_rate_setpoint = 0.0;
    // m_hgt_setpoint com.eprosima.idl.parser.typecode.PrimitiveTypeCode@43a0cee9
    m_hgt_setpoint = 0.0;
    // m_hgt_rate_setpoint com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6eceb130
    m_hgt_rate_setpoint = 0.0;
    // m_flight_mode com.eprosima.idl.parser.typecode.PrimitiveTypeCode@10a035a0
    m_flight_mode = 0;
    // m_flight_fct com.eprosima.idl.parser.typecode.PrimitiveTypeCode@67b467e9
    m_flight_fct = 0;
    // m_alive com.eprosima.idl.parser.typecode.PrimitiveTypeCode@47db50c5
    m_alive = false;

}

DataRaiIn::~DataRaiIn()
{





















}

DataRaiIn::DataRaiIn(
        const DataRaiIn& x)
{
    m_time = x.m_time;
    m_senseTime = x.m_senseTime;
    m_chnl = x.m_chnl;
    m_xi_setpoint = x.m_xi_setpoint;
    m_eta_setpoint = x.m_eta_setpoint;
    m_zeta_setpoint = x.m_zeta_setpoint;
    m_throttle_setpoint = x.m_throttle_setpoint;
    m_flaps_setpoint = x.m_flaps_setpoint;
    m_roll_setpoint = x.m_roll_setpoint;
    m_roll_rate_setpoint = x.m_roll_rate_setpoint;
    m_pitch_setpoint = x.m_pitch_setpoint;
    m_pitch_rate_setpoint = x.m_pitch_rate_setpoint;
    m_yaw_setpoint = x.m_yaw_setpoint;
    m_yaw_rate_setpoint = x.m_yaw_rate_setpoint;
    m_tas_setpoint = x.m_tas_setpoint;
    m_tas_rate_setpoint = x.m_tas_rate_setpoint;
    m_hgt_setpoint = x.m_hgt_setpoint;
    m_hgt_rate_setpoint = x.m_hgt_rate_setpoint;
    m_flight_mode = x.m_flight_mode;
    m_flight_fct = x.m_flight_fct;
    m_alive = x.m_alive;
}

DataRaiIn::DataRaiIn(
        DataRaiIn&& x)
{
    m_time = x.m_time;
    m_senseTime = x.m_senseTime;
    m_chnl = std::move(x.m_chnl);
    m_xi_setpoint = x.m_xi_setpoint;
    m_eta_setpoint = x.m_eta_setpoint;
    m_zeta_setpoint = x.m_zeta_setpoint;
    m_throttle_setpoint = x.m_throttle_setpoint;
    m_flaps_setpoint = x.m_flaps_setpoint;
    m_roll_setpoint = x.m_roll_setpoint;
    m_roll_rate_setpoint = x.m_roll_rate_setpoint;
    m_pitch_setpoint = x.m_pitch_setpoint;
    m_pitch_rate_setpoint = x.m_pitch_rate_setpoint;
    m_yaw_setpoint = x.m_yaw_setpoint;
    m_yaw_rate_setpoint = x.m_yaw_rate_setpoint;
    m_tas_setpoint = x.m_tas_setpoint;
    m_tas_rate_setpoint = x.m_tas_rate_setpoint;
    m_hgt_setpoint = x.m_hgt_setpoint;
    m_hgt_rate_setpoint = x.m_hgt_rate_setpoint;
    m_flight_mode = x.m_flight_mode;
    m_flight_fct = x.m_flight_fct;
    m_alive = x.m_alive;
}

DataRaiIn& DataRaiIn::operator =(
        const DataRaiIn& x)
{

    m_time = x.m_time;
    m_senseTime = x.m_senseTime;
    m_chnl = x.m_chnl;
    m_xi_setpoint = x.m_xi_setpoint;
    m_eta_setpoint = x.m_eta_setpoint;
    m_zeta_setpoint = x.m_zeta_setpoint;
    m_throttle_setpoint = x.m_throttle_setpoint;
    m_flaps_setpoint = x.m_flaps_setpoint;
    m_roll_setpoint = x.m_roll_setpoint;
    m_roll_rate_setpoint = x.m_roll_rate_setpoint;
    m_pitch_setpoint = x.m_pitch_setpoint;
    m_pitch_rate_setpoint = x.m_pitch_rate_setpoint;
    m_yaw_setpoint = x.m_yaw_setpoint;
    m_yaw_rate_setpoint = x.m_yaw_rate_setpoint;
    m_tas_setpoint = x.m_tas_setpoint;
    m_tas_rate_setpoint = x.m_tas_rate_setpoint;
    m_hgt_setpoint = x.m_hgt_setpoint;
    m_hgt_rate_setpoint = x.m_hgt_rate_setpoint;
    m_flight_mode = x.m_flight_mode;
    m_flight_fct = x.m_flight_fct;
    m_alive = x.m_alive;

    return *this;
}

DataRaiIn& DataRaiIn::operator =(
        DataRaiIn&& x)
{

    m_time = x.m_time;
    m_senseTime = x.m_senseTime;
    m_chnl = std::move(x.m_chnl);
    m_xi_setpoint = x.m_xi_setpoint;
    m_eta_setpoint = x.m_eta_setpoint;
    m_zeta_setpoint = x.m_zeta_setpoint;
    m_throttle_setpoint = x.m_throttle_setpoint;
    m_flaps_setpoint = x.m_flaps_setpoint;
    m_roll_setpoint = x.m_roll_setpoint;
    m_roll_rate_setpoint = x.m_roll_rate_setpoint;
    m_pitch_setpoint = x.m_pitch_setpoint;
    m_pitch_rate_setpoint = x.m_pitch_rate_setpoint;
    m_yaw_setpoint = x.m_yaw_setpoint;
    m_yaw_rate_setpoint = x.m_yaw_rate_setpoint;
    m_tas_setpoint = x.m_tas_setpoint;
    m_tas_rate_setpoint = x.m_tas_rate_setpoint;
    m_hgt_setpoint = x.m_hgt_setpoint;
    m_hgt_rate_setpoint = x.m_hgt_rate_setpoint;
    m_flight_mode = x.m_flight_mode;
    m_flight_fct = x.m_flight_fct;
    m_alive = x.m_alive;

    return *this;
}

size_t DataRaiIn::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += ((12) * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t DataRaiIn::getCdrSerializedSize(
        const DataRaiIn& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    if ((12) > 0)
    {
        current_alignment += ((12) * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void DataRaiIn::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_time;
    scdr << m_senseTime;
    scdr << m_chnl;

    scdr << m_xi_setpoint;
    scdr << m_eta_setpoint;
    scdr << m_zeta_setpoint;
    scdr << m_throttle_setpoint;
    scdr << m_flaps_setpoint;
    scdr << m_roll_setpoint;
    scdr << m_roll_rate_setpoint;
    scdr << m_pitch_setpoint;
    scdr << m_pitch_rate_setpoint;
    scdr << m_yaw_setpoint;
    scdr << m_yaw_rate_setpoint;
    scdr << m_tas_setpoint;
    scdr << m_tas_rate_setpoint;
    scdr << m_hgt_setpoint;
    scdr << m_hgt_rate_setpoint;
    scdr << m_flight_mode;
    scdr << m_flight_fct;
    scdr << m_alive;

}

void DataRaiIn::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_time;
    dcdr >> m_senseTime;
    dcdr >> m_chnl;

    dcdr >> m_xi_setpoint;
    dcdr >> m_eta_setpoint;
    dcdr >> m_zeta_setpoint;
    dcdr >> m_throttle_setpoint;
    dcdr >> m_flaps_setpoint;
    dcdr >> m_roll_setpoint;
    dcdr >> m_roll_rate_setpoint;
    dcdr >> m_pitch_setpoint;
    dcdr >> m_pitch_rate_setpoint;
    dcdr >> m_yaw_setpoint;
    dcdr >> m_yaw_rate_setpoint;
    dcdr >> m_tas_setpoint;
    dcdr >> m_tas_rate_setpoint;
    dcdr >> m_hgt_setpoint;
    dcdr >> m_hgt_rate_setpoint;
    dcdr >> m_flight_mode;
    dcdr >> m_flight_fct;
    dcdr >> m_alive;
}

/*!
 * @brief This function sets a value in member time
 * @param _time New value for member time
 */
void DataRaiIn::time(
        uint64_t _time)
{
    m_time = _time;
}

/*!
 * @brief This function returns the value of member time
 * @return Value of member time
 */
uint64_t DataRaiIn::time() const
{
    return m_time;
}

/*!
 * @brief This function returns a reference to member time
 * @return Reference to member time
 */
uint64_t& DataRaiIn::time()
{
    return m_time;
}

/*!
 * @brief This function sets a value in member senseTime
 * @param _senseTime New value for member senseTime
 */
void DataRaiIn::senseTime(
        double _senseTime)
{
    m_senseTime = _senseTime;
}

/*!
 * @brief This function returns the value of member senseTime
 * @return Value of member senseTime
 */
double DataRaiIn::senseTime() const
{
    return m_senseTime;
}

/*!
 * @brief This function returns a reference to member senseTime
 * @return Reference to member senseTime
 */
double& DataRaiIn::senseTime()
{
    return m_senseTime;
}

/*!
 * @brief This function copies the value in member chnl
 * @param _chnl New value to be copied in member chnl
 */
void DataRaiIn::chnl(
        const std::array<uint16_t, 12>& _chnl)
{
    m_chnl = _chnl;
}

/*!
 * @brief This function moves the value in member chnl
 * @param _chnl New value to be moved in member chnl
 */
void DataRaiIn::chnl(
        std::array<uint16_t, 12>&& _chnl)
{
    m_chnl = std::move(_chnl);
}

/*!
 * @brief This function returns a constant reference to member chnl
 * @return Constant reference to member chnl
 */
const std::array<uint16_t, 12>& DataRaiIn::chnl() const
{
    return m_chnl;
}

/*!
 * @brief This function returns a reference to member chnl
 * @return Reference to member chnl
 */
std::array<uint16_t, 12>& DataRaiIn::chnl()
{
    return m_chnl;
}
/*!
 * @brief This function sets a value in member xi_setpoint
 * @param _xi_setpoint New value for member xi_setpoint
 */
void DataRaiIn::xi_setpoint(
        double _xi_setpoint)
{
    m_xi_setpoint = _xi_setpoint;
}

/*!
 * @brief This function returns the value of member xi_setpoint
 * @return Value of member xi_setpoint
 */
double DataRaiIn::xi_setpoint() const
{
    return m_xi_setpoint;
}

/*!
 * @brief This function returns a reference to member xi_setpoint
 * @return Reference to member xi_setpoint
 */
double& DataRaiIn::xi_setpoint()
{
    return m_xi_setpoint;
}

/*!
 * @brief This function sets a value in member eta_setpoint
 * @param _eta_setpoint New value for member eta_setpoint
 */
void DataRaiIn::eta_setpoint(
        double _eta_setpoint)
{
    m_eta_setpoint = _eta_setpoint;
}

/*!
 * @brief This function returns the value of member eta_setpoint
 * @return Value of member eta_setpoint
 */
double DataRaiIn::eta_setpoint() const
{
    return m_eta_setpoint;
}

/*!
 * @brief This function returns a reference to member eta_setpoint
 * @return Reference to member eta_setpoint
 */
double& DataRaiIn::eta_setpoint()
{
    return m_eta_setpoint;
}

/*!
 * @brief This function sets a value in member zeta_setpoint
 * @param _zeta_setpoint New value for member zeta_setpoint
 */
void DataRaiIn::zeta_setpoint(
        double _zeta_setpoint)
{
    m_zeta_setpoint = _zeta_setpoint;
}

/*!
 * @brief This function returns the value of member zeta_setpoint
 * @return Value of member zeta_setpoint
 */
double DataRaiIn::zeta_setpoint() const
{
    return m_zeta_setpoint;
}

/*!
 * @brief This function returns a reference to member zeta_setpoint
 * @return Reference to member zeta_setpoint
 */
double& DataRaiIn::zeta_setpoint()
{
    return m_zeta_setpoint;
}

/*!
 * @brief This function sets a value in member throttle_setpoint
 * @param _throttle_setpoint New value for member throttle_setpoint
 */
void DataRaiIn::throttle_setpoint(
        double _throttle_setpoint)
{
    m_throttle_setpoint = _throttle_setpoint;
}

/*!
 * @brief This function returns the value of member throttle_setpoint
 * @return Value of member throttle_setpoint
 */
double DataRaiIn::throttle_setpoint() const
{
    return m_throttle_setpoint;
}

/*!
 * @brief This function returns a reference to member throttle_setpoint
 * @return Reference to member throttle_setpoint
 */
double& DataRaiIn::throttle_setpoint()
{
    return m_throttle_setpoint;
}

/*!
 * @brief This function sets a value in member flaps_setpoint
 * @param _flaps_setpoint New value for member flaps_setpoint
 */
void DataRaiIn::flaps_setpoint(
        double _flaps_setpoint)
{
    m_flaps_setpoint = _flaps_setpoint;
}

/*!
 * @brief This function returns the value of member flaps_setpoint
 * @return Value of member flaps_setpoint
 */
double DataRaiIn::flaps_setpoint() const
{
    return m_flaps_setpoint;
}

/*!
 * @brief This function returns a reference to member flaps_setpoint
 * @return Reference to member flaps_setpoint
 */
double& DataRaiIn::flaps_setpoint()
{
    return m_flaps_setpoint;
}

/*!
 * @brief This function sets a value in member roll_setpoint
 * @param _roll_setpoint New value for member roll_setpoint
 */
void DataRaiIn::roll_setpoint(
        double _roll_setpoint)
{
    m_roll_setpoint = _roll_setpoint;
}

/*!
 * @brief This function returns the value of member roll_setpoint
 * @return Value of member roll_setpoint
 */
double DataRaiIn::roll_setpoint() const
{
    return m_roll_setpoint;
}

/*!
 * @brief This function returns a reference to member roll_setpoint
 * @return Reference to member roll_setpoint
 */
double& DataRaiIn::roll_setpoint()
{
    return m_roll_setpoint;
}

/*!
 * @brief This function sets a value in member roll_rate_setpoint
 * @param _roll_rate_setpoint New value for member roll_rate_setpoint
 */
void DataRaiIn::roll_rate_setpoint(
        double _roll_rate_setpoint)
{
    m_roll_rate_setpoint = _roll_rate_setpoint;
}

/*!
 * @brief This function returns the value of member roll_rate_setpoint
 * @return Value of member roll_rate_setpoint
 */
double DataRaiIn::roll_rate_setpoint() const
{
    return m_roll_rate_setpoint;
}

/*!
 * @brief This function returns a reference to member roll_rate_setpoint
 * @return Reference to member roll_rate_setpoint
 */
double& DataRaiIn::roll_rate_setpoint()
{
    return m_roll_rate_setpoint;
}

/*!
 * @brief This function sets a value in member pitch_setpoint
 * @param _pitch_setpoint New value for member pitch_setpoint
 */
void DataRaiIn::pitch_setpoint(
        double _pitch_setpoint)
{
    m_pitch_setpoint = _pitch_setpoint;
}

/*!
 * @brief This function returns the value of member pitch_setpoint
 * @return Value of member pitch_setpoint
 */
double DataRaiIn::pitch_setpoint() const
{
    return m_pitch_setpoint;
}

/*!
 * @brief This function returns a reference to member pitch_setpoint
 * @return Reference to member pitch_setpoint
 */
double& DataRaiIn::pitch_setpoint()
{
    return m_pitch_setpoint;
}

/*!
 * @brief This function sets a value in member pitch_rate_setpoint
 * @param _pitch_rate_setpoint New value for member pitch_rate_setpoint
 */
void DataRaiIn::pitch_rate_setpoint(
        double _pitch_rate_setpoint)
{
    m_pitch_rate_setpoint = _pitch_rate_setpoint;
}

/*!
 * @brief This function returns the value of member pitch_rate_setpoint
 * @return Value of member pitch_rate_setpoint
 */
double DataRaiIn::pitch_rate_setpoint() const
{
    return m_pitch_rate_setpoint;
}

/*!
 * @brief This function returns a reference to member pitch_rate_setpoint
 * @return Reference to member pitch_rate_setpoint
 */
double& DataRaiIn::pitch_rate_setpoint()
{
    return m_pitch_rate_setpoint;
}

/*!
 * @brief This function sets a value in member yaw_setpoint
 * @param _yaw_setpoint New value for member yaw_setpoint
 */
void DataRaiIn::yaw_setpoint(
        double _yaw_setpoint)
{
    m_yaw_setpoint = _yaw_setpoint;
}

/*!
 * @brief This function returns the value of member yaw_setpoint
 * @return Value of member yaw_setpoint
 */
double DataRaiIn::yaw_setpoint() const
{
    return m_yaw_setpoint;
}

/*!
 * @brief This function returns a reference to member yaw_setpoint
 * @return Reference to member yaw_setpoint
 */
double& DataRaiIn::yaw_setpoint()
{
    return m_yaw_setpoint;
}

/*!
 * @brief This function sets a value in member yaw_rate_setpoint
 * @param _yaw_rate_setpoint New value for member yaw_rate_setpoint
 */
void DataRaiIn::yaw_rate_setpoint(
        double _yaw_rate_setpoint)
{
    m_yaw_rate_setpoint = _yaw_rate_setpoint;
}

/*!
 * @brief This function returns the value of member yaw_rate_setpoint
 * @return Value of member yaw_rate_setpoint
 */
double DataRaiIn::yaw_rate_setpoint() const
{
    return m_yaw_rate_setpoint;
}

/*!
 * @brief This function returns a reference to member yaw_rate_setpoint
 * @return Reference to member yaw_rate_setpoint
 */
double& DataRaiIn::yaw_rate_setpoint()
{
    return m_yaw_rate_setpoint;
}

/*!
 * @brief This function sets a value in member tas_setpoint
 * @param _tas_setpoint New value for member tas_setpoint
 */
void DataRaiIn::tas_setpoint(
        double _tas_setpoint)
{
    m_tas_setpoint = _tas_setpoint;
}

/*!
 * @brief This function returns the value of member tas_setpoint
 * @return Value of member tas_setpoint
 */
double DataRaiIn::tas_setpoint() const
{
    return m_tas_setpoint;
}

/*!
 * @brief This function returns a reference to member tas_setpoint
 * @return Reference to member tas_setpoint
 */
double& DataRaiIn::tas_setpoint()
{
    return m_tas_setpoint;
}

/*!
 * @brief This function sets a value in member tas_rate_setpoint
 * @param _tas_rate_setpoint New value for member tas_rate_setpoint
 */
void DataRaiIn::tas_rate_setpoint(
        double _tas_rate_setpoint)
{
    m_tas_rate_setpoint = _tas_rate_setpoint;
}

/*!
 * @brief This function returns the value of member tas_rate_setpoint
 * @return Value of member tas_rate_setpoint
 */
double DataRaiIn::tas_rate_setpoint() const
{
    return m_tas_rate_setpoint;
}

/*!
 * @brief This function returns a reference to member tas_rate_setpoint
 * @return Reference to member tas_rate_setpoint
 */
double& DataRaiIn::tas_rate_setpoint()
{
    return m_tas_rate_setpoint;
}

/*!
 * @brief This function sets a value in member hgt_setpoint
 * @param _hgt_setpoint New value for member hgt_setpoint
 */
void DataRaiIn::hgt_setpoint(
        double _hgt_setpoint)
{
    m_hgt_setpoint = _hgt_setpoint;
}

/*!
 * @brief This function returns the value of member hgt_setpoint
 * @return Value of member hgt_setpoint
 */
double DataRaiIn::hgt_setpoint() const
{
    return m_hgt_setpoint;
}

/*!
 * @brief This function returns a reference to member hgt_setpoint
 * @return Reference to member hgt_setpoint
 */
double& DataRaiIn::hgt_setpoint()
{
    return m_hgt_setpoint;
}

/*!
 * @brief This function sets a value in member hgt_rate_setpoint
 * @param _hgt_rate_setpoint New value for member hgt_rate_setpoint
 */
void DataRaiIn::hgt_rate_setpoint(
        double _hgt_rate_setpoint)
{
    m_hgt_rate_setpoint = _hgt_rate_setpoint;
}

/*!
 * @brief This function returns the value of member hgt_rate_setpoint
 * @return Value of member hgt_rate_setpoint
 */
double DataRaiIn::hgt_rate_setpoint() const
{
    return m_hgt_rate_setpoint;
}

/*!
 * @brief This function returns a reference to member hgt_rate_setpoint
 * @return Reference to member hgt_rate_setpoint
 */
double& DataRaiIn::hgt_rate_setpoint()
{
    return m_hgt_rate_setpoint;
}

/*!
 * @brief This function sets a value in member flight_mode
 * @param _flight_mode New value for member flight_mode
 */
void DataRaiIn::flight_mode(
        uint16_t _flight_mode)
{
    m_flight_mode = _flight_mode;
}

/*!
 * @brief This function returns the value of member flight_mode
 * @return Value of member flight_mode
 */
uint16_t DataRaiIn::flight_mode() const
{
    return m_flight_mode;
}

/*!
 * @brief This function returns a reference to member flight_mode
 * @return Reference to member flight_mode
 */
uint16_t& DataRaiIn::flight_mode()
{
    return m_flight_mode;
}

/*!
 * @brief This function sets a value in member flight_fct
 * @param _flight_fct New value for member flight_fct
 */
void DataRaiIn::flight_fct(
        uint16_t _flight_fct)
{
    m_flight_fct = _flight_fct;
}

/*!
 * @brief This function returns the value of member flight_fct
 * @return Value of member flight_fct
 */
uint16_t DataRaiIn::flight_fct() const
{
    return m_flight_fct;
}

/*!
 * @brief This function returns a reference to member flight_fct
 * @return Reference to member flight_fct
 */
uint16_t& DataRaiIn::flight_fct()
{
    return m_flight_fct;
}

/*!
 * @brief This function sets a value in member alive
 * @param _alive New value for member alive
 */
void DataRaiIn::alive(
        bool _alive)
{
    m_alive = _alive;
}

/*!
 * @brief This function returns the value of member alive
 * @return Value of member alive
 */
bool DataRaiIn::alive() const
{
    return m_alive;
}

/*!
 * @brief This function returns a reference to member alive
 * @return Reference to member alive
 */
bool& DataRaiIn::alive()
{
    return m_alive;
}


size_t DataRaiIn::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;
























    return current_align;
}

bool DataRaiIn::isKeyDefined()
{
    return false;
}

void DataRaiIn::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
                         
}
