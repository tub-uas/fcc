// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DataPsu.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _DATAPSU_H_
#define _DATAPSU_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(DataPsu_SOURCE)
#define DataPsu_DllAPI __declspec( dllexport )
#else
#define DataPsu_DllAPI __declspec( dllimport )
#endif // DataPsu_SOURCE
#else
#define DataPsu_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define DataPsu_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure DataPsu defined by the user in the IDL file.
 * @ingroup DATAPSU
 */
class DataPsu
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DataPsu();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DataPsu();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DataPsu that will be copied.
     */
    eProsima_user_DllExport DataPsu(
            const DataPsu& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DataPsu that will be copied.
     */
    eProsima_user_DllExport DataPsu(
            DataPsu&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DataPsu that will be copied.
     */
    eProsima_user_DllExport DataPsu& operator =(
            const DataPsu& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DataPsu that will be copied.
     */
    eProsima_user_DllExport DataPsu& operator =(
            DataPsu&& x);

    /*!
     * @brief This function sets a value in member time
     * @param _time New value for member time
     */
    eProsima_user_DllExport void time(
            uint64_t _time);

    /*!
     * @brief This function returns the value of member time
     * @return Value of member time
     */
    eProsima_user_DllExport uint64_t time() const;

    /*!
     * @brief This function returns a reference to member time
     * @return Reference to member time
     */
    eProsima_user_DllExport uint64_t& time();

    /*!
     * @brief This function sets a value in member senseTime
     * @param _senseTime New value for member senseTime
     */
    eProsima_user_DllExport void senseTime(
            double _senseTime);

    /*!
     * @brief This function returns the value of member senseTime
     * @return Value of member senseTime
     */
    eProsima_user_DllExport double senseTime() const;

    /*!
     * @brief This function returns a reference to member senseTime
     * @return Reference to member senseTime
     */
    eProsima_user_DllExport double& senseTime();

    /*!
     * @brief This function sets a value in member main_volt
     * @param _main_volt New value for member main_volt
     */
    eProsima_user_DllExport void main_volt(
            double _main_volt);

    /*!
     * @brief This function returns the value of member main_volt
     * @return Value of member main_volt
     */
    eProsima_user_DllExport double main_volt() const;

    /*!
     * @brief This function returns a reference to member main_volt
     * @return Reference to member main_volt
     */
    eProsima_user_DllExport double& main_volt();

    /*!
     * @brief This function sets a value in member main_curr
     * @param _main_curr New value for member main_curr
     */
    eProsima_user_DllExport void main_curr(
            double _main_curr);

    /*!
     * @brief This function returns the value of member main_curr
     * @return Value of member main_curr
     */
    eProsima_user_DllExport double main_curr() const;

    /*!
     * @brief This function returns a reference to member main_curr
     * @return Reference to member main_curr
     */
    eProsima_user_DllExport double& main_curr();

    /*!
     * @brief This function sets a value in member main_pwr
     * @param _main_pwr New value for member main_pwr
     */
    eProsima_user_DllExport void main_pwr(
            double _main_pwr);

    /*!
     * @brief This function returns the value of member main_pwr
     * @return Value of member main_pwr
     */
    eProsima_user_DllExport double main_pwr() const;

    /*!
     * @brief This function returns a reference to member main_pwr
     * @return Reference to member main_pwr
     */
    eProsima_user_DllExport double& main_pwr();

    /*!
     * @brief This function sets a value in member pwr_volt
     * @param _pwr_volt New value for member pwr_volt
     */
    eProsima_user_DllExport void pwr_volt(
            double _pwr_volt);

    /*!
     * @brief This function returns the value of member pwr_volt
     * @return Value of member pwr_volt
     */
    eProsima_user_DllExport double pwr_volt() const;

    /*!
     * @brief This function returns a reference to member pwr_volt
     * @return Reference to member pwr_volt
     */
    eProsima_user_DllExport double& pwr_volt();

    /*!
     * @brief This function sets a value in member pwr_curr
     * @param _pwr_curr New value for member pwr_curr
     */
    eProsima_user_DllExport void pwr_curr(
            double _pwr_curr);

    /*!
     * @brief This function returns the value of member pwr_curr
     * @return Value of member pwr_curr
     */
    eProsima_user_DllExport double pwr_curr() const;

    /*!
     * @brief This function returns a reference to member pwr_curr
     * @return Reference to member pwr_curr
     */
    eProsima_user_DllExport double& pwr_curr();

    /*!
     * @brief This function sets a value in member pwr_pwr
     * @param _pwr_pwr New value for member pwr_pwr
     */
    eProsima_user_DllExport void pwr_pwr(
            double _pwr_pwr);

    /*!
     * @brief This function returns the value of member pwr_pwr
     * @return Value of member pwr_pwr
     */
    eProsima_user_DllExport double pwr_pwr() const;

    /*!
     * @brief This function returns a reference to member pwr_pwr
     * @return Reference to member pwr_pwr
     */
    eProsima_user_DllExport double& pwr_pwr();

    /*!
     * @brief This function sets a value in member sys_volt
     * @param _sys_volt New value for member sys_volt
     */
    eProsima_user_DllExport void sys_volt(
            double _sys_volt);

    /*!
     * @brief This function returns the value of member sys_volt
     * @return Value of member sys_volt
     */
    eProsima_user_DllExport double sys_volt() const;

    /*!
     * @brief This function returns a reference to member sys_volt
     * @return Reference to member sys_volt
     */
    eProsima_user_DllExport double& sys_volt();

    /*!
     * @brief This function sets a value in member sys_curr
     * @param _sys_curr New value for member sys_curr
     */
    eProsima_user_DllExport void sys_curr(
            double _sys_curr);

    /*!
     * @brief This function returns the value of member sys_curr
     * @return Value of member sys_curr
     */
    eProsima_user_DllExport double sys_curr() const;

    /*!
     * @brief This function returns a reference to member sys_curr
     * @return Reference to member sys_curr
     */
    eProsima_user_DllExport double& sys_curr();

    /*!
     * @brief This function sets a value in member sys_pwr
     * @param _sys_pwr New value for member sys_pwr
     */
    eProsima_user_DllExport void sys_pwr(
            double _sys_pwr);

    /*!
     * @brief This function returns the value of member sys_pwr
     * @return Value of member sys_pwr
     */
    eProsima_user_DllExport double sys_pwr() const;

    /*!
     * @brief This function returns a reference to member sys_pwr
     * @return Reference to member sys_pwr
     */
    eProsima_user_DllExport double& sys_pwr();

    /*!
     * @brief This function sets a value in member alive
     * @param _alive New value for member alive
     */
    eProsima_user_DllExport void alive(
            bool _alive);

    /*!
     * @brief This function returns the value of member alive
     * @return Value of member alive
     */
    eProsima_user_DllExport bool alive() const;

    /*!
     * @brief This function returns a reference to member alive
     * @return Reference to member alive
     */
    eProsima_user_DllExport bool& alive();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const DataPsu& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint64_t m_time;
    double m_senseTime;
    double m_main_volt;
    double m_main_curr;
    double m_main_pwr;
    double m_pwr_volt;
    double m_pwr_curr;
    double m_pwr_pwr;
    double m_sys_volt;
    double m_sys_curr;
    double m_sys_pwr;
    bool m_alive;
};

#endif // _DATAPSU_H_