// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DataPsu.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _DATAPSU_H_
#define _DATAPSU_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(DataPsu_SOURCE)
#define DataPsu_DllAPI __declspec( dllexport )
#else
#define DataPsu_DllAPI __declspec( dllimport )
#endif // DataPsu_SOURCE
#else
#define DataPsu_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define DataPsu_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure DataPsu defined by the user in the IDL file.
 * @ingroup DATAPSU
 */
class DataPsu
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DataPsu();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DataPsu();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DataPsu that will be copied.
     */
    eProsima_user_DllExport DataPsu(
            const DataPsu& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DataPsu that will be copied.
     */
    eProsima_user_DllExport DataPsu(
            DataPsu&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DataPsu that will be copied.
     */
    eProsima_user_DllExport DataPsu& operator =(
            const DataPsu& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DataPsu that will be copied.
     */
    eProsima_user_DllExport DataPsu& operator =(
            DataPsu&& x);

    /*!
     * @brief This function sets a value in member time
     * @param _time New value for member time
     */
    eProsima_user_DllExport void time(
            uint64_t _time);

    /*!
     * @brief This function returns the value of member time
     * @return Value of member time
     */
    eProsima_user_DllExport uint64_t time() const;

    /*!
     * @brief This function returns a reference to member time
     * @return Reference to member time
     */
    eProsima_user_DllExport uint64_t& time();

    /*!
     * @brief This function sets a value in member senseTime
     * @param _senseTime New value for member senseTime
     */
    eProsima_user_DllExport void senseTime(
            float _senseTime);

    /*!
     * @brief This function returns the value of member senseTime
     * @return Value of member senseTime
     */
    eProsima_user_DllExport float senseTime() const;

    /*!
     * @brief This function returns a reference to member senseTime
     * @return Reference to member senseTime
     */
    eProsima_user_DllExport float& senseTime();

    /*!
     * @brief This function sets a value in member mainVolt
     * @param _mainVolt New value for member mainVolt
     */
    eProsima_user_DllExport void mainVolt(
            float _mainVolt);

    /*!
     * @brief This function returns the value of member mainVolt
     * @return Value of member mainVolt
     */
    eProsima_user_DllExport float mainVolt() const;

    /*!
     * @brief This function returns a reference to member mainVolt
     * @return Reference to member mainVolt
     */
    eProsima_user_DllExport float& mainVolt();

    /*!
     * @brief This function sets a value in member mainCurr
     * @param _mainCurr New value for member mainCurr
     */
    eProsima_user_DllExport void mainCurr(
            float _mainCurr);

    /*!
     * @brief This function returns the value of member mainCurr
     * @return Value of member mainCurr
     */
    eProsima_user_DllExport float mainCurr() const;

    /*!
     * @brief This function returns a reference to member mainCurr
     * @return Reference to member mainCurr
     */
    eProsima_user_DllExport float& mainCurr();

    /*!
     * @brief This function sets a value in member mainPow
     * @param _mainPow New value for member mainPow
     */
    eProsima_user_DllExport void mainPow(
            float _mainPow);

    /*!
     * @brief This function returns the value of member mainPow
     * @return Value of member mainPow
     */
    eProsima_user_DllExport float mainPow() const;

    /*!
     * @brief This function returns a reference to member mainPow
     * @return Reference to member mainPow
     */
    eProsima_user_DllExport float& mainPow();

    /*!
     * @brief This function sets a value in member pwrVolt
     * @param _pwrVolt New value for member pwrVolt
     */
    eProsima_user_DllExport void pwrVolt(
            float _pwrVolt);

    /*!
     * @brief This function returns the value of member pwrVolt
     * @return Value of member pwrVolt
     */
    eProsima_user_DllExport float pwrVolt() const;

    /*!
     * @brief This function returns a reference to member pwrVolt
     * @return Reference to member pwrVolt
     */
    eProsima_user_DllExport float& pwrVolt();

    /*!
     * @brief This function sets a value in member pwrCurr
     * @param _pwrCurr New value for member pwrCurr
     */
    eProsima_user_DllExport void pwrCurr(
            float _pwrCurr);

    /*!
     * @brief This function returns the value of member pwrCurr
     * @return Value of member pwrCurr
     */
    eProsima_user_DllExport float pwrCurr() const;

    /*!
     * @brief This function returns a reference to member pwrCurr
     * @return Reference to member pwrCurr
     */
    eProsima_user_DllExport float& pwrCurr();

    /*!
     * @brief This function sets a value in member pwrPow
     * @param _pwrPow New value for member pwrPow
     */
    eProsima_user_DllExport void pwrPow(
            float _pwrPow);

    /*!
     * @brief This function returns the value of member pwrPow
     * @return Value of member pwrPow
     */
    eProsima_user_DllExport float pwrPow() const;

    /*!
     * @brief This function returns a reference to member pwrPow
     * @return Reference to member pwrPow
     */
    eProsima_user_DllExport float& pwrPow();

    /*!
     * @brief This function sets a value in member sysVolt
     * @param _sysVolt New value for member sysVolt
     */
    eProsima_user_DllExport void sysVolt(
            float _sysVolt);

    /*!
     * @brief This function returns the value of member sysVolt
     * @return Value of member sysVolt
     */
    eProsima_user_DllExport float sysVolt() const;

    /*!
     * @brief This function returns a reference to member sysVolt
     * @return Reference to member sysVolt
     */
    eProsima_user_DllExport float& sysVolt();

    /*!
     * @brief This function sets a value in member sysCurr
     * @param _sysCurr New value for member sysCurr
     */
    eProsima_user_DllExport void sysCurr(
            float _sysCurr);

    /*!
     * @brief This function returns the value of member sysCurr
     * @return Value of member sysCurr
     */
    eProsima_user_DllExport float sysCurr() const;

    /*!
     * @brief This function returns a reference to member sysCurr
     * @return Reference to member sysCurr
     */
    eProsima_user_DllExport float& sysCurr();

    /*!
     * @brief This function sets a value in member sysPow
     * @param _sysPow New value for member sysPow
     */
    eProsima_user_DllExport void sysPow(
            float _sysPow);

    /*!
     * @brief This function returns the value of member sysPow
     * @return Value of member sysPow
     */
    eProsima_user_DllExport float sysPow() const;

    /*!
     * @brief This function returns a reference to member sysPow
     * @return Reference to member sysPow
     */
    eProsima_user_DllExport float& sysPow();

    /*!
     * @brief This function sets a value in member alive
     * @param _alive New value for member alive
     */
    eProsima_user_DllExport void alive(
            bool _alive);

    /*!
     * @brief This function returns the value of member alive
     * @return Value of member alive
     */
    eProsima_user_DllExport bool alive() const;

    /*!
     * @brief This function returns a reference to member alive
     * @return Reference to member alive
     */
    eProsima_user_DllExport bool& alive();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const DataPsu& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint64_t m_time;
    float m_senseTime;
    float m_mainVolt;
    float m_mainCurr;
    float m_mainPow;
    float m_pwrVolt;
    float m_pwrCurr;
    float m_pwrPow;
    float m_sysVolt;
    float m_sysCurr;
    float m_sysPow;
    bool m_alive;
};

#endif // _DATAPSU_H_