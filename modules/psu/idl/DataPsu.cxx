// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DataPsu.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "DataPsu.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

DataPsu::DataPsu()
{
    // m_time com.eprosima.idl.parser.typecode.PrimitiveTypeCode@64f6106c
    m_time = 0;
    // m_senseTime com.eprosima.idl.parser.typecode.PrimitiveTypeCode@553a3d88
    m_senseTime = 0.0;
    // m_mainVolt com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7a30d1e6
    m_mainVolt = 0.0;
    // m_mainCurr com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5891e32e
    m_mainCurr = 0.0;
    // m_mainPow com.eprosima.idl.parser.typecode.PrimitiveTypeCode@28ac3dc3
    m_mainPow = 0.0;
    // m_pwrVolt com.eprosima.idl.parser.typecode.PrimitiveTypeCode@32eebfca
    m_pwrVolt = 0.0;
    // m_pwrCurr com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4e718207
    m_pwrCurr = 0.0;
    // m_pwrPow com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1d371b2d
    m_pwrPow = 0.0;
    // m_sysVolt com.eprosima.idl.parser.typecode.PrimitiveTypeCode@543c6f6d
    m_sysVolt = 0.0;
    // m_sysCurr com.eprosima.idl.parser.typecode.PrimitiveTypeCode@13eb8acf
    m_sysCurr = 0.0;
    // m_sysPow com.eprosima.idl.parser.typecode.PrimitiveTypeCode@51c8530f
    m_sysPow = 0.0;
    // m_alive com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7403c468
    m_alive = false;

}

DataPsu::~DataPsu()
{












}

DataPsu::DataPsu(
        const DataPsu& x)
{
    m_time = x.m_time;
    m_senseTime = x.m_senseTime;
    m_mainVolt = x.m_mainVolt;
    m_mainCurr = x.m_mainCurr;
    m_mainPow = x.m_mainPow;
    m_pwrVolt = x.m_pwrVolt;
    m_pwrCurr = x.m_pwrCurr;
    m_pwrPow = x.m_pwrPow;
    m_sysVolt = x.m_sysVolt;
    m_sysCurr = x.m_sysCurr;
    m_sysPow = x.m_sysPow;
    m_alive = x.m_alive;
}

DataPsu::DataPsu(
        DataPsu&& x)
{
    m_time = x.m_time;
    m_senseTime = x.m_senseTime;
    m_mainVolt = x.m_mainVolt;
    m_mainCurr = x.m_mainCurr;
    m_mainPow = x.m_mainPow;
    m_pwrVolt = x.m_pwrVolt;
    m_pwrCurr = x.m_pwrCurr;
    m_pwrPow = x.m_pwrPow;
    m_sysVolt = x.m_sysVolt;
    m_sysCurr = x.m_sysCurr;
    m_sysPow = x.m_sysPow;
    m_alive = x.m_alive;
}

DataPsu& DataPsu::operator =(
        const DataPsu& x)
{

    m_time = x.m_time;
    m_senseTime = x.m_senseTime;
    m_mainVolt = x.m_mainVolt;
    m_mainCurr = x.m_mainCurr;
    m_mainPow = x.m_mainPow;
    m_pwrVolt = x.m_pwrVolt;
    m_pwrCurr = x.m_pwrCurr;
    m_pwrPow = x.m_pwrPow;
    m_sysVolt = x.m_sysVolt;
    m_sysCurr = x.m_sysCurr;
    m_sysPow = x.m_sysPow;
    m_alive = x.m_alive;

    return *this;
}

DataPsu& DataPsu::operator =(
        DataPsu&& x)
{

    m_time = x.m_time;
    m_senseTime = x.m_senseTime;
    m_mainVolt = x.m_mainVolt;
    m_mainCurr = x.m_mainCurr;
    m_mainPow = x.m_mainPow;
    m_pwrVolt = x.m_pwrVolt;
    m_pwrCurr = x.m_pwrCurr;
    m_pwrPow = x.m_pwrPow;
    m_sysVolt = x.m_sysVolt;
    m_sysCurr = x.m_sysCurr;
    m_sysPow = x.m_sysPow;
    m_alive = x.m_alive;

    return *this;
}

size_t DataPsu::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t DataPsu::getCdrSerializedSize(
        const DataPsu& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void DataPsu::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_time;
    scdr << m_senseTime;
    scdr << m_mainVolt;
    scdr << m_mainCurr;
    scdr << m_mainPow;
    scdr << m_pwrVolt;
    scdr << m_pwrCurr;
    scdr << m_pwrPow;
    scdr << m_sysVolt;
    scdr << m_sysCurr;
    scdr << m_sysPow;
    scdr << m_alive;

}

void DataPsu::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_time;
    dcdr >> m_senseTime;
    dcdr >> m_mainVolt;
    dcdr >> m_mainCurr;
    dcdr >> m_mainPow;
    dcdr >> m_pwrVolt;
    dcdr >> m_pwrCurr;
    dcdr >> m_pwrPow;
    dcdr >> m_sysVolt;
    dcdr >> m_sysCurr;
    dcdr >> m_sysPow;
    dcdr >> m_alive;
}

/*!
 * @brief This function sets a value in member time
 * @param _time New value for member time
 */
void DataPsu::time(
        uint64_t _time)
{
    m_time = _time;
}

/*!
 * @brief This function returns the value of member time
 * @return Value of member time
 */
uint64_t DataPsu::time() const
{
    return m_time;
}

/*!
 * @brief This function returns a reference to member time
 * @return Reference to member time
 */
uint64_t& DataPsu::time()
{
    return m_time;
}

/*!
 * @brief This function sets a value in member senseTime
 * @param _senseTime New value for member senseTime
 */
void DataPsu::senseTime(
        float _senseTime)
{
    m_senseTime = _senseTime;
}

/*!
 * @brief This function returns the value of member senseTime
 * @return Value of member senseTime
 */
float DataPsu::senseTime() const
{
    return m_senseTime;
}

/*!
 * @brief This function returns a reference to member senseTime
 * @return Reference to member senseTime
 */
float& DataPsu::senseTime()
{
    return m_senseTime;
}

/*!
 * @brief This function sets a value in member mainVolt
 * @param _mainVolt New value for member mainVolt
 */
void DataPsu::mainVolt(
        float _mainVolt)
{
    m_mainVolt = _mainVolt;
}

/*!
 * @brief This function returns the value of member mainVolt
 * @return Value of member mainVolt
 */
float DataPsu::mainVolt() const
{
    return m_mainVolt;
}

/*!
 * @brief This function returns a reference to member mainVolt
 * @return Reference to member mainVolt
 */
float& DataPsu::mainVolt()
{
    return m_mainVolt;
}

/*!
 * @brief This function sets a value in member mainCurr
 * @param _mainCurr New value for member mainCurr
 */
void DataPsu::mainCurr(
        float _mainCurr)
{
    m_mainCurr = _mainCurr;
}

/*!
 * @brief This function returns the value of member mainCurr
 * @return Value of member mainCurr
 */
float DataPsu::mainCurr() const
{
    return m_mainCurr;
}

/*!
 * @brief This function returns a reference to member mainCurr
 * @return Reference to member mainCurr
 */
float& DataPsu::mainCurr()
{
    return m_mainCurr;
}

/*!
 * @brief This function sets a value in member mainPow
 * @param _mainPow New value for member mainPow
 */
void DataPsu::mainPow(
        float _mainPow)
{
    m_mainPow = _mainPow;
}

/*!
 * @brief This function returns the value of member mainPow
 * @return Value of member mainPow
 */
float DataPsu::mainPow() const
{
    return m_mainPow;
}

/*!
 * @brief This function returns a reference to member mainPow
 * @return Reference to member mainPow
 */
float& DataPsu::mainPow()
{
    return m_mainPow;
}

/*!
 * @brief This function sets a value in member pwrVolt
 * @param _pwrVolt New value for member pwrVolt
 */
void DataPsu::pwrVolt(
        float _pwrVolt)
{
    m_pwrVolt = _pwrVolt;
}

/*!
 * @brief This function returns the value of member pwrVolt
 * @return Value of member pwrVolt
 */
float DataPsu::pwrVolt() const
{
    return m_pwrVolt;
}

/*!
 * @brief This function returns a reference to member pwrVolt
 * @return Reference to member pwrVolt
 */
float& DataPsu::pwrVolt()
{
    return m_pwrVolt;
}

/*!
 * @brief This function sets a value in member pwrCurr
 * @param _pwrCurr New value for member pwrCurr
 */
void DataPsu::pwrCurr(
        float _pwrCurr)
{
    m_pwrCurr = _pwrCurr;
}

/*!
 * @brief This function returns the value of member pwrCurr
 * @return Value of member pwrCurr
 */
float DataPsu::pwrCurr() const
{
    return m_pwrCurr;
}

/*!
 * @brief This function returns a reference to member pwrCurr
 * @return Reference to member pwrCurr
 */
float& DataPsu::pwrCurr()
{
    return m_pwrCurr;
}

/*!
 * @brief This function sets a value in member pwrPow
 * @param _pwrPow New value for member pwrPow
 */
void DataPsu::pwrPow(
        float _pwrPow)
{
    m_pwrPow = _pwrPow;
}

/*!
 * @brief This function returns the value of member pwrPow
 * @return Value of member pwrPow
 */
float DataPsu::pwrPow() const
{
    return m_pwrPow;
}

/*!
 * @brief This function returns a reference to member pwrPow
 * @return Reference to member pwrPow
 */
float& DataPsu::pwrPow()
{
    return m_pwrPow;
}

/*!
 * @brief This function sets a value in member sysVolt
 * @param _sysVolt New value for member sysVolt
 */
void DataPsu::sysVolt(
        float _sysVolt)
{
    m_sysVolt = _sysVolt;
}

/*!
 * @brief This function returns the value of member sysVolt
 * @return Value of member sysVolt
 */
float DataPsu::sysVolt() const
{
    return m_sysVolt;
}

/*!
 * @brief This function returns a reference to member sysVolt
 * @return Reference to member sysVolt
 */
float& DataPsu::sysVolt()
{
    return m_sysVolt;
}

/*!
 * @brief This function sets a value in member sysCurr
 * @param _sysCurr New value for member sysCurr
 */
void DataPsu::sysCurr(
        float _sysCurr)
{
    m_sysCurr = _sysCurr;
}

/*!
 * @brief This function returns the value of member sysCurr
 * @return Value of member sysCurr
 */
float DataPsu::sysCurr() const
{
    return m_sysCurr;
}

/*!
 * @brief This function returns a reference to member sysCurr
 * @return Reference to member sysCurr
 */
float& DataPsu::sysCurr()
{
    return m_sysCurr;
}

/*!
 * @brief This function sets a value in member sysPow
 * @param _sysPow New value for member sysPow
 */
void DataPsu::sysPow(
        float _sysPow)
{
    m_sysPow = _sysPow;
}

/*!
 * @brief This function returns the value of member sysPow
 * @return Value of member sysPow
 */
float DataPsu::sysPow() const
{
    return m_sysPow;
}

/*!
 * @brief This function returns a reference to member sysPow
 * @return Reference to member sysPow
 */
float& DataPsu::sysPow()
{
    return m_sysPow;
}

/*!
 * @brief This function sets a value in member alive
 * @param _alive New value for member alive
 */
void DataPsu::alive(
        bool _alive)
{
    m_alive = _alive;
}

/*!
 * @brief This function returns the value of member alive
 * @return Value of member alive
 */
bool DataPsu::alive() const
{
    return m_alive;
}

/*!
 * @brief This function returns a reference to member alive
 * @return Reference to member alive
 */
bool& DataPsu::alive()
{
    return m_alive;
}


size_t DataPsu::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;















    return current_align;
}

bool DataPsu::isKeyDefined()
{
    return false;
}

void DataPsu::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
                
}
