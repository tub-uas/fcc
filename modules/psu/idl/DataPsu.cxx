// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DataPsu.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "DataPsu.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

DataPsu::DataPsu()
{
    // m_time com.eprosima.idl.parser.typecode.PrimitiveTypeCode@74a10858
    m_time = 0;
    // m_senseTime com.eprosima.idl.parser.typecode.PrimitiveTypeCode@23fe1d71
    m_senseTime = 0.0;
    // m_main_volt com.eprosima.idl.parser.typecode.PrimitiveTypeCode@28ac3dc3
    m_main_volt = 0.0;
    // m_main_curr com.eprosima.idl.parser.typecode.PrimitiveTypeCode@32eebfca
    m_main_curr = 0.0;
    // m_main_pwr com.eprosima.idl.parser.typecode.PrimitiveTypeCode@51c8530f
    m_main_pwr = 0.0;
    // m_pwr_volt com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7403c468
    m_pwr_volt = 0.0;
    // m_pwr_curr com.eprosima.idl.parser.typecode.PrimitiveTypeCode@43738a82
    m_pwr_curr = 0.0;
    // m_pwr_pwr com.eprosima.idl.parser.typecode.PrimitiveTypeCode@c81cdd1
    m_pwr_pwr = 0.0;
    // m_sys_volt com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1fc2b765
    m_sys_volt = 0.0;
    // m_sys_curr com.eprosima.idl.parser.typecode.PrimitiveTypeCode@75881071
    m_sys_curr = 0.0;
    // m_sys_pwr com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2a70a3d8
    m_sys_pwr = 0.0;
    // m_alive com.eprosima.idl.parser.typecode.PrimitiveTypeCode@289d1c02
    m_alive = false;

}

DataPsu::~DataPsu()
{












}

DataPsu::DataPsu(
        const DataPsu& x)
{
    m_time = x.m_time;
    m_senseTime = x.m_senseTime;
    m_main_volt = x.m_main_volt;
    m_main_curr = x.m_main_curr;
    m_main_pwr = x.m_main_pwr;
    m_pwr_volt = x.m_pwr_volt;
    m_pwr_curr = x.m_pwr_curr;
    m_pwr_pwr = x.m_pwr_pwr;
    m_sys_volt = x.m_sys_volt;
    m_sys_curr = x.m_sys_curr;
    m_sys_pwr = x.m_sys_pwr;
    m_alive = x.m_alive;
}

DataPsu::DataPsu(
        DataPsu&& x)
{
    m_time = x.m_time;
    m_senseTime = x.m_senseTime;
    m_main_volt = x.m_main_volt;
    m_main_curr = x.m_main_curr;
    m_main_pwr = x.m_main_pwr;
    m_pwr_volt = x.m_pwr_volt;
    m_pwr_curr = x.m_pwr_curr;
    m_pwr_pwr = x.m_pwr_pwr;
    m_sys_volt = x.m_sys_volt;
    m_sys_curr = x.m_sys_curr;
    m_sys_pwr = x.m_sys_pwr;
    m_alive = x.m_alive;
}

DataPsu& DataPsu::operator =(
        const DataPsu& x)
{

    m_time = x.m_time;
    m_senseTime = x.m_senseTime;
    m_main_volt = x.m_main_volt;
    m_main_curr = x.m_main_curr;
    m_main_pwr = x.m_main_pwr;
    m_pwr_volt = x.m_pwr_volt;
    m_pwr_curr = x.m_pwr_curr;
    m_pwr_pwr = x.m_pwr_pwr;
    m_sys_volt = x.m_sys_volt;
    m_sys_curr = x.m_sys_curr;
    m_sys_pwr = x.m_sys_pwr;
    m_alive = x.m_alive;

    return *this;
}

DataPsu& DataPsu::operator =(
        DataPsu&& x)
{

    m_time = x.m_time;
    m_senseTime = x.m_senseTime;
    m_main_volt = x.m_main_volt;
    m_main_curr = x.m_main_curr;
    m_main_pwr = x.m_main_pwr;
    m_pwr_volt = x.m_pwr_volt;
    m_pwr_curr = x.m_pwr_curr;
    m_pwr_pwr = x.m_pwr_pwr;
    m_sys_volt = x.m_sys_volt;
    m_sys_curr = x.m_sys_curr;
    m_sys_pwr = x.m_sys_pwr;
    m_alive = x.m_alive;

    return *this;
}

size_t DataPsu::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t DataPsu::getCdrSerializedSize(
        const DataPsu& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void DataPsu::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_time;
    scdr << m_senseTime;
    scdr << m_main_volt;
    scdr << m_main_curr;
    scdr << m_main_pwr;
    scdr << m_pwr_volt;
    scdr << m_pwr_curr;
    scdr << m_pwr_pwr;
    scdr << m_sys_volt;
    scdr << m_sys_curr;
    scdr << m_sys_pwr;
    scdr << m_alive;

}

void DataPsu::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_time;
    dcdr >> m_senseTime;
    dcdr >> m_main_volt;
    dcdr >> m_main_curr;
    dcdr >> m_main_pwr;
    dcdr >> m_pwr_volt;
    dcdr >> m_pwr_curr;
    dcdr >> m_pwr_pwr;
    dcdr >> m_sys_volt;
    dcdr >> m_sys_curr;
    dcdr >> m_sys_pwr;
    dcdr >> m_alive;
}

/*!
 * @brief This function sets a value in member time
 * @param _time New value for member time
 */
void DataPsu::time(
        uint64_t _time)
{
    m_time = _time;
}

/*!
 * @brief This function returns the value of member time
 * @return Value of member time
 */
uint64_t DataPsu::time() const
{
    return m_time;
}

/*!
 * @brief This function returns a reference to member time
 * @return Reference to member time
 */
uint64_t& DataPsu::time()
{
    return m_time;
}

/*!
 * @brief This function sets a value in member senseTime
 * @param _senseTime New value for member senseTime
 */
void DataPsu::senseTime(
        double _senseTime)
{
    m_senseTime = _senseTime;
}

/*!
 * @brief This function returns the value of member senseTime
 * @return Value of member senseTime
 */
double DataPsu::senseTime() const
{
    return m_senseTime;
}

/*!
 * @brief This function returns a reference to member senseTime
 * @return Reference to member senseTime
 */
double& DataPsu::senseTime()
{
    return m_senseTime;
}

/*!
 * @brief This function sets a value in member main_volt
 * @param _main_volt New value for member main_volt
 */
void DataPsu::main_volt(
        double _main_volt)
{
    m_main_volt = _main_volt;
}

/*!
 * @brief This function returns the value of member main_volt
 * @return Value of member main_volt
 */
double DataPsu::main_volt() const
{
    return m_main_volt;
}

/*!
 * @brief This function returns a reference to member main_volt
 * @return Reference to member main_volt
 */
double& DataPsu::main_volt()
{
    return m_main_volt;
}

/*!
 * @brief This function sets a value in member main_curr
 * @param _main_curr New value for member main_curr
 */
void DataPsu::main_curr(
        double _main_curr)
{
    m_main_curr = _main_curr;
}

/*!
 * @brief This function returns the value of member main_curr
 * @return Value of member main_curr
 */
double DataPsu::main_curr() const
{
    return m_main_curr;
}

/*!
 * @brief This function returns a reference to member main_curr
 * @return Reference to member main_curr
 */
double& DataPsu::main_curr()
{
    return m_main_curr;
}

/*!
 * @brief This function sets a value in member main_pwr
 * @param _main_pwr New value for member main_pwr
 */
void DataPsu::main_pwr(
        double _main_pwr)
{
    m_main_pwr = _main_pwr;
}

/*!
 * @brief This function returns the value of member main_pwr
 * @return Value of member main_pwr
 */
double DataPsu::main_pwr() const
{
    return m_main_pwr;
}

/*!
 * @brief This function returns a reference to member main_pwr
 * @return Reference to member main_pwr
 */
double& DataPsu::main_pwr()
{
    return m_main_pwr;
}

/*!
 * @brief This function sets a value in member pwr_volt
 * @param _pwr_volt New value for member pwr_volt
 */
void DataPsu::pwr_volt(
        double _pwr_volt)
{
    m_pwr_volt = _pwr_volt;
}

/*!
 * @brief This function returns the value of member pwr_volt
 * @return Value of member pwr_volt
 */
double DataPsu::pwr_volt() const
{
    return m_pwr_volt;
}

/*!
 * @brief This function returns a reference to member pwr_volt
 * @return Reference to member pwr_volt
 */
double& DataPsu::pwr_volt()
{
    return m_pwr_volt;
}

/*!
 * @brief This function sets a value in member pwr_curr
 * @param _pwr_curr New value for member pwr_curr
 */
void DataPsu::pwr_curr(
        double _pwr_curr)
{
    m_pwr_curr = _pwr_curr;
}

/*!
 * @brief This function returns the value of member pwr_curr
 * @return Value of member pwr_curr
 */
double DataPsu::pwr_curr() const
{
    return m_pwr_curr;
}

/*!
 * @brief This function returns a reference to member pwr_curr
 * @return Reference to member pwr_curr
 */
double& DataPsu::pwr_curr()
{
    return m_pwr_curr;
}

/*!
 * @brief This function sets a value in member pwr_pwr
 * @param _pwr_pwr New value for member pwr_pwr
 */
void DataPsu::pwr_pwr(
        double _pwr_pwr)
{
    m_pwr_pwr = _pwr_pwr;
}

/*!
 * @brief This function returns the value of member pwr_pwr
 * @return Value of member pwr_pwr
 */
double DataPsu::pwr_pwr() const
{
    return m_pwr_pwr;
}

/*!
 * @brief This function returns a reference to member pwr_pwr
 * @return Reference to member pwr_pwr
 */
double& DataPsu::pwr_pwr()
{
    return m_pwr_pwr;
}

/*!
 * @brief This function sets a value in member sys_volt
 * @param _sys_volt New value for member sys_volt
 */
void DataPsu::sys_volt(
        double _sys_volt)
{
    m_sys_volt = _sys_volt;
}

/*!
 * @brief This function returns the value of member sys_volt
 * @return Value of member sys_volt
 */
double DataPsu::sys_volt() const
{
    return m_sys_volt;
}

/*!
 * @brief This function returns a reference to member sys_volt
 * @return Reference to member sys_volt
 */
double& DataPsu::sys_volt()
{
    return m_sys_volt;
}

/*!
 * @brief This function sets a value in member sys_curr
 * @param _sys_curr New value for member sys_curr
 */
void DataPsu::sys_curr(
        double _sys_curr)
{
    m_sys_curr = _sys_curr;
}

/*!
 * @brief This function returns the value of member sys_curr
 * @return Value of member sys_curr
 */
double DataPsu::sys_curr() const
{
    return m_sys_curr;
}

/*!
 * @brief This function returns a reference to member sys_curr
 * @return Reference to member sys_curr
 */
double& DataPsu::sys_curr()
{
    return m_sys_curr;
}

/*!
 * @brief This function sets a value in member sys_pwr
 * @param _sys_pwr New value for member sys_pwr
 */
void DataPsu::sys_pwr(
        double _sys_pwr)
{
    m_sys_pwr = _sys_pwr;
}

/*!
 * @brief This function returns the value of member sys_pwr
 * @return Value of member sys_pwr
 */
double DataPsu::sys_pwr() const
{
    return m_sys_pwr;
}

/*!
 * @brief This function returns a reference to member sys_pwr
 * @return Reference to member sys_pwr
 */
double& DataPsu::sys_pwr()
{
    return m_sys_pwr;
}

/*!
 * @brief This function sets a value in member alive
 * @param _alive New value for member alive
 */
void DataPsu::alive(
        bool _alive)
{
    m_alive = _alive;
}

/*!
 * @brief This function returns the value of member alive
 * @return Value of member alive
 */
bool DataPsu::alive() const
{
    return m_alive;
}

/*!
 * @brief This function returns a reference to member alive
 * @return Reference to member alive
 */
bool& DataPsu::alive()
{
    return m_alive;
}


size_t DataPsu::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;















    return current_align;
}

bool DataPsu::isKeyDefined()
{
    return false;
}

void DataPsu::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
                
}
