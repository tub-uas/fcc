// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DataGps.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "DataGps.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

DataGps::DataGps()
{
    // m_time com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1d371b2d
    m_time = 0;
    // m_senseTime com.eprosima.idl.parser.typecode.PrimitiveTypeCode@543c6f6d
    m_senseTime = 0.0;
    // m_latitude com.eprosima.idl.parser.typecode.PrimitiveTypeCode@13eb8acf
    m_latitude = 0.0;
    // m_longitude com.eprosima.idl.parser.typecode.PrimitiveTypeCode@51c8530f
    m_longitude = 0.0;
    // m_alt_msl com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7403c468
    m_alt_msl = 0.0;
    // m_groundspeed com.eprosima.idl.parser.typecode.PrimitiveTypeCode@43738a82
    m_groundspeed = 0.0;
    // m_course_over_ground com.eprosima.idl.parser.typecode.PrimitiveTypeCode@c81cdd1
    m_course_over_ground = 0.0;
    // m_dop_position com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1fc2b765
    m_dop_position = 0.0;
    // m_dop_horizontal com.eprosima.idl.parser.typecode.PrimitiveTypeCode@75881071
    m_dop_horizontal = 0.0;
    // m_dop_velocity com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2a70a3d8
    m_dop_velocity = 0.0;
    // m_sats com.eprosima.idl.parser.typecode.PrimitiveTypeCode@289d1c02
    m_sats = 0;
    // m_sats_in_view com.eprosima.idl.parser.typecode.PrimitiveTypeCode@22eeefeb
    m_sats_in_view = 0;
    // m_fix com.eprosima.idl.parser.typecode.PrimitiveTypeCode@17d0685f
    m_fix = 0;
    // m_fix_mode com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3891771e
    m_fix_mode = 0;
    // m_second com.eprosima.idl.parser.typecode.PrimitiveTypeCode@78ac1102
    m_second = 0;
    // m_minute com.eprosima.idl.parser.typecode.PrimitiveTypeCode@a74868d
    m_minute = 0;
    // m_hour com.eprosima.idl.parser.typecode.PrimitiveTypeCode@782663d3
    m_hour = 0;
    // m_day com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1990a65e
    m_day = 0;
    // m_month com.eprosima.idl.parser.typecode.PrimitiveTypeCode@64485a47
    m_month = 0;
    // m_year com.eprosima.idl.parser.typecode.PrimitiveTypeCode@25bbf683
    m_year = 0;
    // m_variation com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6ec8211c
    m_variation = 0.0;
    // m_magX com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7276c8cd
    m_magX = 0.0;
    // m_magY com.eprosima.idl.parser.typecode.PrimitiveTypeCode@544a2ea6
    m_magY = 0.0;
    // m_magZ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2e3fc542
    m_magZ = 0.0;
    // m_alive com.eprosima.idl.parser.typecode.PrimitiveTypeCode@150c158
    m_alive = false;

}

DataGps::~DataGps()
{

























}

DataGps::DataGps(
        const DataGps& x)
{
    m_time = x.m_time;
    m_senseTime = x.m_senseTime;
    m_latitude = x.m_latitude;
    m_longitude = x.m_longitude;
    m_alt_msl = x.m_alt_msl;
    m_groundspeed = x.m_groundspeed;
    m_course_over_ground = x.m_course_over_ground;
    m_dop_position = x.m_dop_position;
    m_dop_horizontal = x.m_dop_horizontal;
    m_dop_velocity = x.m_dop_velocity;
    m_sats = x.m_sats;
    m_sats_in_view = x.m_sats_in_view;
    m_fix = x.m_fix;
    m_fix_mode = x.m_fix_mode;
    m_second = x.m_second;
    m_minute = x.m_minute;
    m_hour = x.m_hour;
    m_day = x.m_day;
    m_month = x.m_month;
    m_year = x.m_year;
    m_variation = x.m_variation;
    m_magX = x.m_magX;
    m_magY = x.m_magY;
    m_magZ = x.m_magZ;
    m_alive = x.m_alive;
}

DataGps::DataGps(
        DataGps&& x)
{
    m_time = x.m_time;
    m_senseTime = x.m_senseTime;
    m_latitude = x.m_latitude;
    m_longitude = x.m_longitude;
    m_alt_msl = x.m_alt_msl;
    m_groundspeed = x.m_groundspeed;
    m_course_over_ground = x.m_course_over_ground;
    m_dop_position = x.m_dop_position;
    m_dop_horizontal = x.m_dop_horizontal;
    m_dop_velocity = x.m_dop_velocity;
    m_sats = x.m_sats;
    m_sats_in_view = x.m_sats_in_view;
    m_fix = x.m_fix;
    m_fix_mode = x.m_fix_mode;
    m_second = x.m_second;
    m_minute = x.m_minute;
    m_hour = x.m_hour;
    m_day = x.m_day;
    m_month = x.m_month;
    m_year = x.m_year;
    m_variation = x.m_variation;
    m_magX = x.m_magX;
    m_magY = x.m_magY;
    m_magZ = x.m_magZ;
    m_alive = x.m_alive;
}

DataGps& DataGps::operator =(
        const DataGps& x)
{

    m_time = x.m_time;
    m_senseTime = x.m_senseTime;
    m_latitude = x.m_latitude;
    m_longitude = x.m_longitude;
    m_alt_msl = x.m_alt_msl;
    m_groundspeed = x.m_groundspeed;
    m_course_over_ground = x.m_course_over_ground;
    m_dop_position = x.m_dop_position;
    m_dop_horizontal = x.m_dop_horizontal;
    m_dop_velocity = x.m_dop_velocity;
    m_sats = x.m_sats;
    m_sats_in_view = x.m_sats_in_view;
    m_fix = x.m_fix;
    m_fix_mode = x.m_fix_mode;
    m_second = x.m_second;
    m_minute = x.m_minute;
    m_hour = x.m_hour;
    m_day = x.m_day;
    m_month = x.m_month;
    m_year = x.m_year;
    m_variation = x.m_variation;
    m_magX = x.m_magX;
    m_magY = x.m_magY;
    m_magZ = x.m_magZ;
    m_alive = x.m_alive;

    return *this;
}

DataGps& DataGps::operator =(
        DataGps&& x)
{

    m_time = x.m_time;
    m_senseTime = x.m_senseTime;
    m_latitude = x.m_latitude;
    m_longitude = x.m_longitude;
    m_alt_msl = x.m_alt_msl;
    m_groundspeed = x.m_groundspeed;
    m_course_over_ground = x.m_course_over_ground;
    m_dop_position = x.m_dop_position;
    m_dop_horizontal = x.m_dop_horizontal;
    m_dop_velocity = x.m_dop_velocity;
    m_sats = x.m_sats;
    m_sats_in_view = x.m_sats_in_view;
    m_fix = x.m_fix;
    m_fix_mode = x.m_fix_mode;
    m_second = x.m_second;
    m_minute = x.m_minute;
    m_hour = x.m_hour;
    m_day = x.m_day;
    m_month = x.m_month;
    m_year = x.m_year;
    m_variation = x.m_variation;
    m_magX = x.m_magX;
    m_magY = x.m_magY;
    m_magZ = x.m_magZ;
    m_alive = x.m_alive;

    return *this;
}

size_t DataGps::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t DataGps::getCdrSerializedSize(
        const DataGps& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void DataGps::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_time;
    scdr << m_senseTime;
    scdr << m_latitude;
    scdr << m_longitude;
    scdr << m_alt_msl;
    scdr << m_groundspeed;
    scdr << m_course_over_ground;
    scdr << m_dop_position;
    scdr << m_dop_horizontal;
    scdr << m_dop_velocity;
    scdr << m_sats;
    scdr << m_sats_in_view;
    scdr << m_fix;
    scdr << m_fix_mode;
    scdr << m_second;
    scdr << m_minute;
    scdr << m_hour;
    scdr << m_day;
    scdr << m_month;
    scdr << m_year;
    scdr << m_variation;
    scdr << m_magX;
    scdr << m_magY;
    scdr << m_magZ;
    scdr << m_alive;

}

void DataGps::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_time;
    dcdr >> m_senseTime;
    dcdr >> m_latitude;
    dcdr >> m_longitude;
    dcdr >> m_alt_msl;
    dcdr >> m_groundspeed;
    dcdr >> m_course_over_ground;
    dcdr >> m_dop_position;
    dcdr >> m_dop_horizontal;
    dcdr >> m_dop_velocity;
    dcdr >> m_sats;
    dcdr >> m_sats_in_view;
    dcdr >> m_fix;
    dcdr >> m_fix_mode;
    dcdr >> m_second;
    dcdr >> m_minute;
    dcdr >> m_hour;
    dcdr >> m_day;
    dcdr >> m_month;
    dcdr >> m_year;
    dcdr >> m_variation;
    dcdr >> m_magX;
    dcdr >> m_magY;
    dcdr >> m_magZ;
    dcdr >> m_alive;
}

/*!
 * @brief This function sets a value in member time
 * @param _time New value for member time
 */
void DataGps::time(
        uint64_t _time)
{
    m_time = _time;
}

/*!
 * @brief This function returns the value of member time
 * @return Value of member time
 */
uint64_t DataGps::time() const
{
    return m_time;
}

/*!
 * @brief This function returns a reference to member time
 * @return Reference to member time
 */
uint64_t& DataGps::time()
{
    return m_time;
}

/*!
 * @brief This function sets a value in member senseTime
 * @param _senseTime New value for member senseTime
 */
void DataGps::senseTime(
        double _senseTime)
{
    m_senseTime = _senseTime;
}

/*!
 * @brief This function returns the value of member senseTime
 * @return Value of member senseTime
 */
double DataGps::senseTime() const
{
    return m_senseTime;
}

/*!
 * @brief This function returns a reference to member senseTime
 * @return Reference to member senseTime
 */
double& DataGps::senseTime()
{
    return m_senseTime;
}

/*!
 * @brief This function sets a value in member latitude
 * @param _latitude New value for member latitude
 */
void DataGps::latitude(
        double _latitude)
{
    m_latitude = _latitude;
}

/*!
 * @brief This function returns the value of member latitude
 * @return Value of member latitude
 */
double DataGps::latitude() const
{
    return m_latitude;
}

/*!
 * @brief This function returns a reference to member latitude
 * @return Reference to member latitude
 */
double& DataGps::latitude()
{
    return m_latitude;
}

/*!
 * @brief This function sets a value in member longitude
 * @param _longitude New value for member longitude
 */
void DataGps::longitude(
        double _longitude)
{
    m_longitude = _longitude;
}

/*!
 * @brief This function returns the value of member longitude
 * @return Value of member longitude
 */
double DataGps::longitude() const
{
    return m_longitude;
}

/*!
 * @brief This function returns a reference to member longitude
 * @return Reference to member longitude
 */
double& DataGps::longitude()
{
    return m_longitude;
}

/*!
 * @brief This function sets a value in member alt_msl
 * @param _alt_msl New value for member alt_msl
 */
void DataGps::alt_msl(
        double _alt_msl)
{
    m_alt_msl = _alt_msl;
}

/*!
 * @brief This function returns the value of member alt_msl
 * @return Value of member alt_msl
 */
double DataGps::alt_msl() const
{
    return m_alt_msl;
}

/*!
 * @brief This function returns a reference to member alt_msl
 * @return Reference to member alt_msl
 */
double& DataGps::alt_msl()
{
    return m_alt_msl;
}

/*!
 * @brief This function sets a value in member groundspeed
 * @param _groundspeed New value for member groundspeed
 */
void DataGps::groundspeed(
        double _groundspeed)
{
    m_groundspeed = _groundspeed;
}

/*!
 * @brief This function returns the value of member groundspeed
 * @return Value of member groundspeed
 */
double DataGps::groundspeed() const
{
    return m_groundspeed;
}

/*!
 * @brief This function returns a reference to member groundspeed
 * @return Reference to member groundspeed
 */
double& DataGps::groundspeed()
{
    return m_groundspeed;
}

/*!
 * @brief This function sets a value in member course_over_ground
 * @param _course_over_ground New value for member course_over_ground
 */
void DataGps::course_over_ground(
        double _course_over_ground)
{
    m_course_over_ground = _course_over_ground;
}

/*!
 * @brief This function returns the value of member course_over_ground
 * @return Value of member course_over_ground
 */
double DataGps::course_over_ground() const
{
    return m_course_over_ground;
}

/*!
 * @brief This function returns a reference to member course_over_ground
 * @return Reference to member course_over_ground
 */
double& DataGps::course_over_ground()
{
    return m_course_over_ground;
}

/*!
 * @brief This function sets a value in member dop_position
 * @param _dop_position New value for member dop_position
 */
void DataGps::dop_position(
        double _dop_position)
{
    m_dop_position = _dop_position;
}

/*!
 * @brief This function returns the value of member dop_position
 * @return Value of member dop_position
 */
double DataGps::dop_position() const
{
    return m_dop_position;
}

/*!
 * @brief This function returns a reference to member dop_position
 * @return Reference to member dop_position
 */
double& DataGps::dop_position()
{
    return m_dop_position;
}

/*!
 * @brief This function sets a value in member dop_horizontal
 * @param _dop_horizontal New value for member dop_horizontal
 */
void DataGps::dop_horizontal(
        double _dop_horizontal)
{
    m_dop_horizontal = _dop_horizontal;
}

/*!
 * @brief This function returns the value of member dop_horizontal
 * @return Value of member dop_horizontal
 */
double DataGps::dop_horizontal() const
{
    return m_dop_horizontal;
}

/*!
 * @brief This function returns a reference to member dop_horizontal
 * @return Reference to member dop_horizontal
 */
double& DataGps::dop_horizontal()
{
    return m_dop_horizontal;
}

/*!
 * @brief This function sets a value in member dop_velocity
 * @param _dop_velocity New value for member dop_velocity
 */
void DataGps::dop_velocity(
        double _dop_velocity)
{
    m_dop_velocity = _dop_velocity;
}

/*!
 * @brief This function returns the value of member dop_velocity
 * @return Value of member dop_velocity
 */
double DataGps::dop_velocity() const
{
    return m_dop_velocity;
}

/*!
 * @brief This function returns a reference to member dop_velocity
 * @return Reference to member dop_velocity
 */
double& DataGps::dop_velocity()
{
    return m_dop_velocity;
}

/*!
 * @brief This function sets a value in member sats
 * @param _sats New value for member sats
 */
void DataGps::sats(
        uint16_t _sats)
{
    m_sats = _sats;
}

/*!
 * @brief This function returns the value of member sats
 * @return Value of member sats
 */
uint16_t DataGps::sats() const
{
    return m_sats;
}

/*!
 * @brief This function returns a reference to member sats
 * @return Reference to member sats
 */
uint16_t& DataGps::sats()
{
    return m_sats;
}

/*!
 * @brief This function sets a value in member sats_in_view
 * @param _sats_in_view New value for member sats_in_view
 */
void DataGps::sats_in_view(
        uint16_t _sats_in_view)
{
    m_sats_in_view = _sats_in_view;
}

/*!
 * @brief This function returns the value of member sats_in_view
 * @return Value of member sats_in_view
 */
uint16_t DataGps::sats_in_view() const
{
    return m_sats_in_view;
}

/*!
 * @brief This function returns a reference to member sats_in_view
 * @return Reference to member sats_in_view
 */
uint16_t& DataGps::sats_in_view()
{
    return m_sats_in_view;
}

/*!
 * @brief This function sets a value in member fix
 * @param _fix New value for member fix
 */
void DataGps::fix(
        uint16_t _fix)
{
    m_fix = _fix;
}

/*!
 * @brief This function returns the value of member fix
 * @return Value of member fix
 */
uint16_t DataGps::fix() const
{
    return m_fix;
}

/*!
 * @brief This function returns a reference to member fix
 * @return Reference to member fix
 */
uint16_t& DataGps::fix()
{
    return m_fix;
}

/*!
 * @brief This function sets a value in member fix_mode
 * @param _fix_mode New value for member fix_mode
 */
void DataGps::fix_mode(
        uint16_t _fix_mode)
{
    m_fix_mode = _fix_mode;
}

/*!
 * @brief This function returns the value of member fix_mode
 * @return Value of member fix_mode
 */
uint16_t DataGps::fix_mode() const
{
    return m_fix_mode;
}

/*!
 * @brief This function returns a reference to member fix_mode
 * @return Reference to member fix_mode
 */
uint16_t& DataGps::fix_mode()
{
    return m_fix_mode;
}

/*!
 * @brief This function sets a value in member second
 * @param _second New value for member second
 */
void DataGps::second(
        uint16_t _second)
{
    m_second = _second;
}

/*!
 * @brief This function returns the value of member second
 * @return Value of member second
 */
uint16_t DataGps::second() const
{
    return m_second;
}

/*!
 * @brief This function returns a reference to member second
 * @return Reference to member second
 */
uint16_t& DataGps::second()
{
    return m_second;
}

/*!
 * @brief This function sets a value in member minute
 * @param _minute New value for member minute
 */
void DataGps::minute(
        uint16_t _minute)
{
    m_minute = _minute;
}

/*!
 * @brief This function returns the value of member minute
 * @return Value of member minute
 */
uint16_t DataGps::minute() const
{
    return m_minute;
}

/*!
 * @brief This function returns a reference to member minute
 * @return Reference to member minute
 */
uint16_t& DataGps::minute()
{
    return m_minute;
}

/*!
 * @brief This function sets a value in member hour
 * @param _hour New value for member hour
 */
void DataGps::hour(
        uint16_t _hour)
{
    m_hour = _hour;
}

/*!
 * @brief This function returns the value of member hour
 * @return Value of member hour
 */
uint16_t DataGps::hour() const
{
    return m_hour;
}

/*!
 * @brief This function returns a reference to member hour
 * @return Reference to member hour
 */
uint16_t& DataGps::hour()
{
    return m_hour;
}

/*!
 * @brief This function sets a value in member day
 * @param _day New value for member day
 */
void DataGps::day(
        uint16_t _day)
{
    m_day = _day;
}

/*!
 * @brief This function returns the value of member day
 * @return Value of member day
 */
uint16_t DataGps::day() const
{
    return m_day;
}

/*!
 * @brief This function returns a reference to member day
 * @return Reference to member day
 */
uint16_t& DataGps::day()
{
    return m_day;
}

/*!
 * @brief This function sets a value in member month
 * @param _month New value for member month
 */
void DataGps::month(
        uint16_t _month)
{
    m_month = _month;
}

/*!
 * @brief This function returns the value of member month
 * @return Value of member month
 */
uint16_t DataGps::month() const
{
    return m_month;
}

/*!
 * @brief This function returns a reference to member month
 * @return Reference to member month
 */
uint16_t& DataGps::month()
{
    return m_month;
}

/*!
 * @brief This function sets a value in member year
 * @param _year New value for member year
 */
void DataGps::year(
        uint16_t _year)
{
    m_year = _year;
}

/*!
 * @brief This function returns the value of member year
 * @return Value of member year
 */
uint16_t DataGps::year() const
{
    return m_year;
}

/*!
 * @brief This function returns a reference to member year
 * @return Reference to member year
 */
uint16_t& DataGps::year()
{
    return m_year;
}

/*!
 * @brief This function sets a value in member variation
 * @param _variation New value for member variation
 */
void DataGps::variation(
        double _variation)
{
    m_variation = _variation;
}

/*!
 * @brief This function returns the value of member variation
 * @return Value of member variation
 */
double DataGps::variation() const
{
    return m_variation;
}

/*!
 * @brief This function returns a reference to member variation
 * @return Reference to member variation
 */
double& DataGps::variation()
{
    return m_variation;
}

/*!
 * @brief This function sets a value in member magX
 * @param _magX New value for member magX
 */
void DataGps::magX(
        double _magX)
{
    m_magX = _magX;
}

/*!
 * @brief This function returns the value of member magX
 * @return Value of member magX
 */
double DataGps::magX() const
{
    return m_magX;
}

/*!
 * @brief This function returns a reference to member magX
 * @return Reference to member magX
 */
double& DataGps::magX()
{
    return m_magX;
}

/*!
 * @brief This function sets a value in member magY
 * @param _magY New value for member magY
 */
void DataGps::magY(
        double _magY)
{
    m_magY = _magY;
}

/*!
 * @brief This function returns the value of member magY
 * @return Value of member magY
 */
double DataGps::magY() const
{
    return m_magY;
}

/*!
 * @brief This function returns a reference to member magY
 * @return Reference to member magY
 */
double& DataGps::magY()
{
    return m_magY;
}

/*!
 * @brief This function sets a value in member magZ
 * @param _magZ New value for member magZ
 */
void DataGps::magZ(
        double _magZ)
{
    m_magZ = _magZ;
}

/*!
 * @brief This function returns the value of member magZ
 * @return Value of member magZ
 */
double DataGps::magZ() const
{
    return m_magZ;
}

/*!
 * @brief This function returns a reference to member magZ
 * @return Reference to member magZ
 */
double& DataGps::magZ()
{
    return m_magZ;
}

/*!
 * @brief This function sets a value in member alive
 * @param _alive New value for member alive
 */
void DataGps::alive(
        bool _alive)
{
    m_alive = _alive;
}

/*!
 * @brief This function returns the value of member alive
 * @return Value of member alive
 */
bool DataGps::alive() const
{
    return m_alive;
}

/*!
 * @brief This function returns a reference to member alive
 * @return Reference to member alive
 */
bool& DataGps::alive()
{
    return m_alive;
}


size_t DataGps::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;




























    return current_align;
}

bool DataGps::isKeyDefined()
{
    return false;
}

void DataGps::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
                             
}
