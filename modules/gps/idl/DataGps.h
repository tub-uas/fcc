// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DataGps.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _DATAGPS_H_
#define _DATAGPS_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(DataGps_SOURCE)
#define DataGps_DllAPI __declspec( dllexport )
#else
#define DataGps_DllAPI __declspec( dllimport )
#endif // DataGps_SOURCE
#else
#define DataGps_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define DataGps_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure DataGps defined by the user in the IDL file.
 * @ingroup DATAGPS
 */
class DataGps
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DataGps();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DataGps();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DataGps that will be copied.
     */
    eProsima_user_DllExport DataGps(
            const DataGps& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DataGps that will be copied.
     */
    eProsima_user_DllExport DataGps(
            DataGps&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DataGps that will be copied.
     */
    eProsima_user_DllExport DataGps& operator =(
            const DataGps& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DataGps that will be copied.
     */
    eProsima_user_DllExport DataGps& operator =(
            DataGps&& x);

    /*!
     * @brief This function sets a value in member time
     * @param _time New value for member time
     */
    eProsima_user_DllExport void time(
            uint64_t _time);

    /*!
     * @brief This function returns the value of member time
     * @return Value of member time
     */
    eProsima_user_DllExport uint64_t time() const;

    /*!
     * @brief This function returns a reference to member time
     * @return Reference to member time
     */
    eProsima_user_DllExport uint64_t& time();

    /*!
     * @brief This function sets a value in member senseTime
     * @param _senseTime New value for member senseTime
     */
    eProsima_user_DllExport void senseTime(
            double _senseTime);

    /*!
     * @brief This function returns the value of member senseTime
     * @return Value of member senseTime
     */
    eProsima_user_DllExport double senseTime() const;

    /*!
     * @brief This function returns a reference to member senseTime
     * @return Reference to member senseTime
     */
    eProsima_user_DllExport double& senseTime();

    /*!
     * @brief This function sets a value in member latitude
     * @param _latitude New value for member latitude
     */
    eProsima_user_DllExport void latitude(
            double _latitude);

    /*!
     * @brief This function returns the value of member latitude
     * @return Value of member latitude
     */
    eProsima_user_DllExport double latitude() const;

    /*!
     * @brief This function returns a reference to member latitude
     * @return Reference to member latitude
     */
    eProsima_user_DllExport double& latitude();

    /*!
     * @brief This function sets a value in member longitude
     * @param _longitude New value for member longitude
     */
    eProsima_user_DllExport void longitude(
            double _longitude);

    /*!
     * @brief This function returns the value of member longitude
     * @return Value of member longitude
     */
    eProsima_user_DllExport double longitude() const;

    /*!
     * @brief This function returns a reference to member longitude
     * @return Reference to member longitude
     */
    eProsima_user_DllExport double& longitude();

    /*!
     * @brief This function sets a value in member alt_msl
     * @param _alt_msl New value for member alt_msl
     */
    eProsima_user_DllExport void alt_msl(
            double _alt_msl);

    /*!
     * @brief This function returns the value of member alt_msl
     * @return Value of member alt_msl
     */
    eProsima_user_DllExport double alt_msl() const;

    /*!
     * @brief This function returns a reference to member alt_msl
     * @return Reference to member alt_msl
     */
    eProsima_user_DllExport double& alt_msl();

    /*!
     * @brief This function sets a value in member groundspeed
     * @param _groundspeed New value for member groundspeed
     */
    eProsima_user_DllExport void groundspeed(
            double _groundspeed);

    /*!
     * @brief This function returns the value of member groundspeed
     * @return Value of member groundspeed
     */
    eProsima_user_DllExport double groundspeed() const;

    /*!
     * @brief This function returns a reference to member groundspeed
     * @return Reference to member groundspeed
     */
    eProsima_user_DllExport double& groundspeed();

    /*!
     * @brief This function sets a value in member course_over_ground
     * @param _course_over_ground New value for member course_over_ground
     */
    eProsima_user_DllExport void course_over_ground(
            double _course_over_ground);

    /*!
     * @brief This function returns the value of member course_over_ground
     * @return Value of member course_over_ground
     */
    eProsima_user_DllExport double course_over_ground() const;

    /*!
     * @brief This function returns a reference to member course_over_ground
     * @return Reference to member course_over_ground
     */
    eProsima_user_DllExport double& course_over_ground();

    /*!
     * @brief This function sets a value in member dop_position
     * @param _dop_position New value for member dop_position
     */
    eProsima_user_DllExport void dop_position(
            double _dop_position);

    /*!
     * @brief This function returns the value of member dop_position
     * @return Value of member dop_position
     */
    eProsima_user_DllExport double dop_position() const;

    /*!
     * @brief This function returns a reference to member dop_position
     * @return Reference to member dop_position
     */
    eProsima_user_DllExport double& dop_position();

    /*!
     * @brief This function sets a value in member dop_height
     * @param _dop_height New value for member dop_height
     */
    eProsima_user_DllExport void dop_height(
            double _dop_height);

    /*!
     * @brief This function returns the value of member dop_height
     * @return Value of member dop_height
     */
    eProsima_user_DllExport double dop_height() const;

    /*!
     * @brief This function returns a reference to member dop_height
     * @return Reference to member dop_height
     */
    eProsima_user_DllExport double& dop_height();

    /*!
     * @brief This function sets a value in member dop_velocity
     * @param _dop_velocity New value for member dop_velocity
     */
    eProsima_user_DllExport void dop_velocity(
            double _dop_velocity);

    /*!
     * @brief This function returns the value of member dop_velocity
     * @return Value of member dop_velocity
     */
    eProsima_user_DllExport double dop_velocity() const;

    /*!
     * @brief This function returns a reference to member dop_velocity
     * @return Reference to member dop_velocity
     */
    eProsima_user_DllExport double& dop_velocity();

    /*!
     * @brief This function sets a value in member sats
     * @param _sats New value for member sats
     */
    eProsima_user_DllExport void sats(
            uint16_t _sats);

    /*!
     * @brief This function returns the value of member sats
     * @return Value of member sats
     */
    eProsima_user_DllExport uint16_t sats() const;

    /*!
     * @brief This function returns a reference to member sats
     * @return Reference to member sats
     */
    eProsima_user_DllExport uint16_t& sats();

    /*!
     * @brief This function sets a value in member sats_in_view
     * @param _sats_in_view New value for member sats_in_view
     */
    eProsima_user_DllExport void sats_in_view(
            uint16_t _sats_in_view);

    /*!
     * @brief This function returns the value of member sats_in_view
     * @return Value of member sats_in_view
     */
    eProsima_user_DllExport uint16_t sats_in_view() const;

    /*!
     * @brief This function returns a reference to member sats_in_view
     * @return Reference to member sats_in_view
     */
    eProsima_user_DllExport uint16_t& sats_in_view();

    /*!
     * @brief This function sets a value in member fix
     * @param _fix New value for member fix
     */
    eProsima_user_DllExport void fix(
            uint16_t _fix);

    /*!
     * @brief This function returns the value of member fix
     * @return Value of member fix
     */
    eProsima_user_DllExport uint16_t fix() const;

    /*!
     * @brief This function returns a reference to member fix
     * @return Reference to member fix
     */
    eProsima_user_DllExport uint16_t& fix();

    /*!
     * @brief This function sets a value in member fix_mode
     * @param _fix_mode New value for member fix_mode
     */
    eProsima_user_DllExport void fix_mode(
            uint16_t _fix_mode);

    /*!
     * @brief This function returns the value of member fix_mode
     * @return Value of member fix_mode
     */
    eProsima_user_DllExport uint16_t fix_mode() const;

    /*!
     * @brief This function returns a reference to member fix_mode
     * @return Reference to member fix_mode
     */
    eProsima_user_DllExport uint16_t& fix_mode();

    /*!
     * @brief This function sets a value in member second
     * @param _second New value for member second
     */
    eProsima_user_DllExport void second(
            uint16_t _second);

    /*!
     * @brief This function returns the value of member second
     * @return Value of member second
     */
    eProsima_user_DllExport uint16_t second() const;

    /*!
     * @brief This function returns a reference to member second
     * @return Reference to member second
     */
    eProsima_user_DllExport uint16_t& second();

    /*!
     * @brief This function sets a value in member minute
     * @param _minute New value for member minute
     */
    eProsima_user_DllExport void minute(
            uint16_t _minute);

    /*!
     * @brief This function returns the value of member minute
     * @return Value of member minute
     */
    eProsima_user_DllExport uint16_t minute() const;

    /*!
     * @brief This function returns a reference to member minute
     * @return Reference to member minute
     */
    eProsima_user_DllExport uint16_t& minute();

    /*!
     * @brief This function sets a value in member hour
     * @param _hour New value for member hour
     */
    eProsima_user_DllExport void hour(
            uint16_t _hour);

    /*!
     * @brief This function returns the value of member hour
     * @return Value of member hour
     */
    eProsima_user_DllExport uint16_t hour() const;

    /*!
     * @brief This function returns a reference to member hour
     * @return Reference to member hour
     */
    eProsima_user_DllExport uint16_t& hour();

    /*!
     * @brief This function sets a value in member day
     * @param _day New value for member day
     */
    eProsima_user_DllExport void day(
            uint16_t _day);

    /*!
     * @brief This function returns the value of member day
     * @return Value of member day
     */
    eProsima_user_DllExport uint16_t day() const;

    /*!
     * @brief This function returns a reference to member day
     * @return Reference to member day
     */
    eProsima_user_DllExport uint16_t& day();

    /*!
     * @brief This function sets a value in member month
     * @param _month New value for member month
     */
    eProsima_user_DllExport void month(
            uint16_t _month);

    /*!
     * @brief This function returns the value of member month
     * @return Value of member month
     */
    eProsima_user_DllExport uint16_t month() const;

    /*!
     * @brief This function returns a reference to member month
     * @return Reference to member month
     */
    eProsima_user_DllExport uint16_t& month();

    /*!
     * @brief This function sets a value in member year
     * @param _year New value for member year
     */
    eProsima_user_DllExport void year(
            uint16_t _year);

    /*!
     * @brief This function returns the value of member year
     * @return Value of member year
     */
    eProsima_user_DllExport uint16_t year() const;

    /*!
     * @brief This function returns a reference to member year
     * @return Reference to member year
     */
    eProsima_user_DllExport uint16_t& year();

    /*!
     * @brief This function sets a value in member variation
     * @param _variation New value for member variation
     */
    eProsima_user_DllExport void variation(
            double _variation);

    /*!
     * @brief This function returns the value of member variation
     * @return Value of member variation
     */
    eProsima_user_DllExport double variation() const;

    /*!
     * @brief This function returns a reference to member variation
     * @return Reference to member variation
     */
    eProsima_user_DllExport double& variation();

    /*!
     * @brief This function sets a value in member magX
     * @param _magX New value for member magX
     */
    eProsima_user_DllExport void magX(
            double _magX);

    /*!
     * @brief This function returns the value of member magX
     * @return Value of member magX
     */
    eProsima_user_DllExport double magX() const;

    /*!
     * @brief This function returns a reference to member magX
     * @return Reference to member magX
     */
    eProsima_user_DllExport double& magX();

    /*!
     * @brief This function sets a value in member magY
     * @param _magY New value for member magY
     */
    eProsima_user_DllExport void magY(
            double _magY);

    /*!
     * @brief This function returns the value of member magY
     * @return Value of member magY
     */
    eProsima_user_DllExport double magY() const;

    /*!
     * @brief This function returns a reference to member magY
     * @return Reference to member magY
     */
    eProsima_user_DllExport double& magY();

    /*!
     * @brief This function sets a value in member magZ
     * @param _magZ New value for member magZ
     */
    eProsima_user_DllExport void magZ(
            double _magZ);

    /*!
     * @brief This function returns the value of member magZ
     * @return Value of member magZ
     */
    eProsima_user_DllExport double magZ() const;

    /*!
     * @brief This function returns a reference to member magZ
     * @return Reference to member magZ
     */
    eProsima_user_DllExport double& magZ();

    /*!
     * @brief This function sets a value in member alive
     * @param _alive New value for member alive
     */
    eProsima_user_DllExport void alive(
            bool _alive);

    /*!
     * @brief This function returns the value of member alive
     * @return Value of member alive
     */
    eProsima_user_DllExport bool alive() const;

    /*!
     * @brief This function returns a reference to member alive
     * @return Reference to member alive
     */
    eProsima_user_DllExport bool& alive();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const DataGps& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint64_t m_time;
    double m_senseTime;
    double m_latitude;
    double m_longitude;
    double m_alt_msl;
    double m_groundspeed;
    double m_course_over_ground;
    double m_dop_position;
    double m_dop_height;
    double m_dop_velocity;
    uint16_t m_sats;
    uint16_t m_sats_in_view;
    uint16_t m_fix;
    uint16_t m_fix_mode;
    uint16_t m_second;
    uint16_t m_minute;
    uint16_t m_hour;
    uint16_t m_day;
    uint16_t m_month;
    uint16_t m_year;
    double m_variation;
    double m_magX;
    double m_magY;
    double m_magZ;
    bool m_alive;
};

#endif // _DATAGPS_H_