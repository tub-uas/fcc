// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DataAir.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _DATAAIR_H_
#define _DATAAIR_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(DataAir_SOURCE)
#define DataAir_DllAPI __declspec( dllexport )
#else
#define DataAir_DllAPI __declspec( dllimport )
#endif // DataAir_SOURCE
#else
#define DataAir_DllAPI
#endif
#else
#define DataAir_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


/*!
 * @brief This class represents the structure DataAir defined by the user in the IDL file.
 * @ingroup DATAAIR
 */
class DataAir
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DataAir();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DataAir();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DataAir that will be copied.
     */
    eProsima_user_DllExport DataAir(const DataAir &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DataAir that will be copied.
     */
    eProsima_user_DllExport DataAir(DataAir &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DataAir that will be copied.
     */
    eProsima_user_DllExport DataAir& operator=(const DataAir &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DataAir that will be copied.
     */
    eProsima_user_DllExport DataAir& operator=(DataAir &&x);

    /*!
     * @brief This function sets a value in member time
     * @param _time New value for member time
     */
    eProsima_user_DllExport void time(uint64_t _time);

    /*!
     * @brief This function returns the value of member time
     * @return Value of member time
     */
    eProsima_user_DllExport uint64_t time() const;

    /*!
     * @brief This function returns a reference to member time
     * @return Reference to member time
     */
    eProsima_user_DllExport uint64_t& time();

    /*!
     * @brief This function sets a value in member senseTime
     * @param _senseTime New value for member senseTime
     */
    eProsima_user_DllExport void senseTime(float _senseTime);

    /*!
     * @brief This function returns the value of member senseTime
     * @return Value of member senseTime
     */
    eProsima_user_DllExport float senseTime() const;

    /*!
     * @brief This function returns a reference to member senseTime
     * @return Reference to member senseTime
     */
    eProsima_user_DllExport float& senseTime();

    /*!
     * @brief This function sets a value in member dynamicPress
     * @param _dynamicPress New value for member dynamicPress
     */
    eProsima_user_DllExport void dynamicPress(float _dynamicPress);

    /*!
     * @brief This function returns the value of member dynamicPress
     * @return Value of member dynamicPress
     */
    eProsima_user_DllExport float dynamicPress() const;

    /*!
     * @brief This function returns a reference to member dynamicPress
     * @return Reference to member dynamicPress
     */
    eProsima_user_DllExport float& dynamicPress();

    /*!
     * @brief This function sets a value in member velocity
     * @param _velocity New value for member velocity
     */
    eProsima_user_DllExport void velocity(float _velocity);

    /*!
     * @brief This function returns the value of member velocity
     * @return Value of member velocity
     */
    eProsima_user_DllExport float velocity() const;

    /*!
     * @brief This function returns a reference to member velocity
     * @return Reference to member velocity
     */
    eProsima_user_DllExport float& velocity();

    /*!
     * @brief This function sets a value in member baroPress
     * @param _baroPress New value for member baroPress
     */
    eProsima_user_DllExport void baroPress(float _baroPress);

    /*!
     * @brief This function returns the value of member baroPress
     * @return Value of member baroPress
     */
    eProsima_user_DllExport float baroPress() const;

    /*!
     * @brief This function returns a reference to member baroPress
     * @return Reference to member baroPress
     */
    eProsima_user_DllExport float& baroPress();

    /*!
     * @brief This function sets a value in member density
     * @param _density New value for member density
     */
    eProsima_user_DllExport void density(float _density);

    /*!
     * @brief This function returns the value of member density
     * @return Value of member density
     */
    eProsima_user_DllExport float density() const;

    /*!
     * @brief This function returns a reference to member density
     * @return Reference to member density
     */
    eProsima_user_DllExport float& density();

    /*!
     * @brief This function sets a value in member temp
     * @param _temp New value for member temp
     */
    eProsima_user_DllExport void temp(float _temp);

    /*!
     * @brief This function returns the value of member temp
     * @return Value of member temp
     */
    eProsima_user_DllExport float temp() const;

    /*!
     * @brief This function returns a reference to member temp
     * @return Reference to member temp
     */
    eProsima_user_DllExport float& temp();

    /*!
     * @brief This function sets a value in member alive
     * @param _alive New value for member alive
     */
    eProsima_user_DllExport void alive(bool _alive);

    /*!
     * @brief This function returns the value of member alive
     * @return Value of member alive
     */
    eProsima_user_DllExport bool alive() const;

    /*!
     * @brief This function returns a reference to member alive
     * @return Reference to member alive
     */
    eProsima_user_DllExport bool& alive();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const DataAir& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    uint64_t m_time;
    float m_senseTime;
    float m_dynamicPress;
    float m_velocity;
    float m_baroPress;
    float m_density;
    float m_temp;
    bool m_alive;
};

#endif // _DATAAIR_H_