// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DataAir.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _DATAAIR_H_
#define _DATAAIR_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(DataAir_SOURCE)
#define DataAir_DllAPI __declspec( dllexport )
#else
#define DataAir_DllAPI __declspec( dllimport )
#endif // DataAir_SOURCE
#else
#define DataAir_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define DataAir_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure DataAir defined by the user in the IDL file.
 * @ingroup DATAAIR
 */
class DataAir
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DataAir();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DataAir();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DataAir that will be copied.
     */
    eProsima_user_DllExport DataAir(
            const DataAir& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DataAir that will be copied.
     */
    eProsima_user_DllExport DataAir(
            DataAir&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DataAir that will be copied.
     */
    eProsima_user_DllExport DataAir& operator =(
            const DataAir& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DataAir that will be copied.
     */
    eProsima_user_DllExport DataAir& operator =(
            DataAir&& x);

    /*!
     * @brief This function sets a value in member time
     * @param _time New value for member time
     */
    eProsima_user_DllExport void time(
            uint64_t _time);

    /*!
     * @brief This function returns the value of member time
     * @return Value of member time
     */
    eProsima_user_DllExport uint64_t time() const;

    /*!
     * @brief This function returns a reference to member time
     * @return Reference to member time
     */
    eProsima_user_DllExport uint64_t& time();

    /*!
     * @brief This function sets a value in member senseTime
     * @param _senseTime New value for member senseTime
     */
    eProsima_user_DllExport void senseTime(
            double _senseTime);

    /*!
     * @brief This function returns the value of member senseTime
     * @return Value of member senseTime
     */
    eProsima_user_DllExport double senseTime() const;

    /*!
     * @brief This function returns a reference to member senseTime
     * @return Reference to member senseTime
     */
    eProsima_user_DllExport double& senseTime();

    /*!
     * @brief This function sets a value in member dynamic_pressure
     * @param _dynamic_pressure New value for member dynamic_pressure
     */
    eProsima_user_DllExport void dynamic_pressure(
            double _dynamic_pressure);

    /*!
     * @brief This function returns the value of member dynamic_pressure
     * @return Value of member dynamic_pressure
     */
    eProsima_user_DllExport double dynamic_pressure() const;

    /*!
     * @brief This function returns a reference to member dynamic_pressure
     * @return Reference to member dynamic_pressure
     */
    eProsima_user_DllExport double& dynamic_pressure();

    /*!
     * @brief This function sets a value in member true_airspeed
     * @param _true_airspeed New value for member true_airspeed
     */
    eProsima_user_DllExport void true_airspeed(
            double _true_airspeed);

    /*!
     * @brief This function returns the value of member true_airspeed
     * @return Value of member true_airspeed
     */
    eProsima_user_DllExport double true_airspeed() const;

    /*!
     * @brief This function returns a reference to member true_airspeed
     * @return Reference to member true_airspeed
     */
    eProsima_user_DllExport double& true_airspeed();

    /*!
     * @brief This function sets a value in member indicated_airspeed
     * @param _indicated_airspeed New value for member indicated_airspeed
     */
    eProsima_user_DllExport void indicated_airspeed(
            double _indicated_airspeed);

    /*!
     * @brief This function returns the value of member indicated_airspeed
     * @return Value of member indicated_airspeed
     */
    eProsima_user_DllExport double indicated_airspeed() const;

    /*!
     * @brief This function returns a reference to member indicated_airspeed
     * @return Reference to member indicated_airspeed
     */
    eProsima_user_DllExport double& indicated_airspeed();

    /*!
     * @brief This function sets a value in member barometric_pressure
     * @param _barometric_pressure New value for member barometric_pressure
     */
    eProsima_user_DllExport void barometric_pressure(
            double _barometric_pressure);

    /*!
     * @brief This function returns the value of member barometric_pressure
     * @return Value of member barometric_pressure
     */
    eProsima_user_DllExport double barometric_pressure() const;

    /*!
     * @brief This function returns a reference to member barometric_pressure
     * @return Reference to member barometric_pressure
     */
    eProsima_user_DllExport double& barometric_pressure();

    /*!
     * @brief This function sets a value in member barometric_height
     * @param _barometric_height New value for member barometric_height
     */
    eProsima_user_DllExport void barometric_height(
            double _barometric_height);

    /*!
     * @brief This function returns the value of member barometric_height
     * @return Value of member barometric_height
     */
    eProsima_user_DllExport double barometric_height() const;

    /*!
     * @brief This function returns a reference to member barometric_height
     * @return Reference to member barometric_height
     */
    eProsima_user_DllExport double& barometric_height();

    /*!
     * @brief This function sets a value in member density
     * @param _density New value for member density
     */
    eProsima_user_DllExport void density(
            double _density);

    /*!
     * @brief This function returns the value of member density
     * @return Value of member density
     */
    eProsima_user_DllExport double density() const;

    /*!
     * @brief This function returns a reference to member density
     * @return Reference to member density
     */
    eProsima_user_DllExport double& density();

    /*!
     * @brief This function sets a value in member temperature
     * @param _temperature New value for member temperature
     */
    eProsima_user_DllExport void temperature(
            double _temperature);

    /*!
     * @brief This function returns the value of member temperature
     * @return Value of member temperature
     */
    eProsima_user_DllExport double temperature() const;

    /*!
     * @brief This function returns a reference to member temperature
     * @return Reference to member temperature
     */
    eProsima_user_DllExport double& temperature();

    /*!
     * @brief This function sets a value in member alive
     * @param _alive New value for member alive
     */
    eProsima_user_DllExport void alive(
            bool _alive);

    /*!
     * @brief This function returns the value of member alive
     * @return Value of member alive
     */
    eProsima_user_DllExport bool alive() const;

    /*!
     * @brief This function returns a reference to member alive
     * @return Reference to member alive
     */
    eProsima_user_DllExport bool& alive();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const DataAir& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint64_t m_time;
    double m_senseTime;
    double m_dynamic_pressure;
    double m_true_airspeed;
    double m_indicated_airspeed;
    double m_barometric_pressure;
    double m_barometric_height;
    double m_density;
    double m_temperature;
    bool m_alive;
};

#endif // _DATAAIR_H_