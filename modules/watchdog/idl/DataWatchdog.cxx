// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DataWatchdog.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "DataWatchdog.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

DataWatchdog::DataWatchdog()
{
    // m_time com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6ddf90b0
    m_time = 0;
    // m_allAlive com.eprosima.idl.parser.typecode.PrimitiveTypeCode@57536d79
    m_allAlive = false;
    // m_ahrsAlive com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4b4523f8
    m_ahrsAlive = false;
    // m_airAlive com.eprosima.idl.parser.typecode.PrimitiveTypeCode@731a74c
    m_airAlive = false;
    // m_ctrlAlive com.eprosima.idl.parser.typecode.PrimitiveTypeCode@369f73a2
    m_ctrlAlive = false;
    // m_downlinkAlive com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1f28c152
    m_downlinkAlive = false;
    // m_gpsAlive com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7d907bac
    m_gpsAlive = false;
    // m_logAlive com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7791a895
    m_logAlive = false;
    // m_psuAlive com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3a5ed7a6
    m_psuAlive = false;
    // m_raiInAlive com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6325a3ee
    m_raiInAlive = false;
    // m_raiOutAlive com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1d16f93d
    m_raiOutAlive = false;
    // m_sFusionAlive com.eprosima.idl.parser.typecode.PrimitiveTypeCode@67b92f0a
    m_sFusionAlive = false;
    // m_uplinkAlive com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2b9627bc
    m_uplinkAlive = false;
    // m_alive com.eprosima.idl.parser.typecode.PrimitiveTypeCode@65e2dbf3
    m_alive = false;

}

DataWatchdog::~DataWatchdog()
{














}

DataWatchdog::DataWatchdog(const DataWatchdog &x)
{
    m_time = x.m_time;
    m_allAlive = x.m_allAlive;
    m_ahrsAlive = x.m_ahrsAlive;
    m_airAlive = x.m_airAlive;
    m_ctrlAlive = x.m_ctrlAlive;
    m_downlinkAlive = x.m_downlinkAlive;
    m_gpsAlive = x.m_gpsAlive;
    m_logAlive = x.m_logAlive;
    m_psuAlive = x.m_psuAlive;
    m_raiInAlive = x.m_raiInAlive;
    m_raiOutAlive = x.m_raiOutAlive;
    m_sFusionAlive = x.m_sFusionAlive;
    m_uplinkAlive = x.m_uplinkAlive;
    m_alive = x.m_alive;
}

DataWatchdog::DataWatchdog(DataWatchdog &&x)
{
    m_time = x.m_time;
    m_allAlive = x.m_allAlive;
    m_ahrsAlive = x.m_ahrsAlive;
    m_airAlive = x.m_airAlive;
    m_ctrlAlive = x.m_ctrlAlive;
    m_downlinkAlive = x.m_downlinkAlive;
    m_gpsAlive = x.m_gpsAlive;
    m_logAlive = x.m_logAlive;
    m_psuAlive = x.m_psuAlive;
    m_raiInAlive = x.m_raiInAlive;
    m_raiOutAlive = x.m_raiOutAlive;
    m_sFusionAlive = x.m_sFusionAlive;
    m_uplinkAlive = x.m_uplinkAlive;
    m_alive = x.m_alive;
}

DataWatchdog& DataWatchdog::operator=(const DataWatchdog &x)
{

    m_time = x.m_time;
    m_allAlive = x.m_allAlive;
    m_ahrsAlive = x.m_ahrsAlive;
    m_airAlive = x.m_airAlive;
    m_ctrlAlive = x.m_ctrlAlive;
    m_downlinkAlive = x.m_downlinkAlive;
    m_gpsAlive = x.m_gpsAlive;
    m_logAlive = x.m_logAlive;
    m_psuAlive = x.m_psuAlive;
    m_raiInAlive = x.m_raiInAlive;
    m_raiOutAlive = x.m_raiOutAlive;
    m_sFusionAlive = x.m_sFusionAlive;
    m_uplinkAlive = x.m_uplinkAlive;
    m_alive = x.m_alive;

    return *this;
}

DataWatchdog& DataWatchdog::operator=(DataWatchdog &&x)
{

    m_time = x.m_time;
    m_allAlive = x.m_allAlive;
    m_ahrsAlive = x.m_ahrsAlive;
    m_airAlive = x.m_airAlive;
    m_ctrlAlive = x.m_ctrlAlive;
    m_downlinkAlive = x.m_downlinkAlive;
    m_gpsAlive = x.m_gpsAlive;
    m_logAlive = x.m_logAlive;
    m_psuAlive = x.m_psuAlive;
    m_raiInAlive = x.m_raiInAlive;
    m_raiOutAlive = x.m_raiOutAlive;
    m_sFusionAlive = x.m_sFusionAlive;
    m_uplinkAlive = x.m_uplinkAlive;
    m_alive = x.m_alive;

    return *this;
}

size_t DataWatchdog::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t DataWatchdog::getCdrSerializedSize(const DataWatchdog& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void DataWatchdog::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_time;
    scdr << m_allAlive;
    scdr << m_ahrsAlive;
    scdr << m_airAlive;
    scdr << m_ctrlAlive;
    scdr << m_downlinkAlive;
    scdr << m_gpsAlive;
    scdr << m_logAlive;
    scdr << m_psuAlive;
    scdr << m_raiInAlive;
    scdr << m_raiOutAlive;
    scdr << m_sFusionAlive;
    scdr << m_uplinkAlive;
    scdr << m_alive;
}

void DataWatchdog::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_time;
    dcdr >> m_allAlive;
    dcdr >> m_ahrsAlive;
    dcdr >> m_airAlive;
    dcdr >> m_ctrlAlive;
    dcdr >> m_downlinkAlive;
    dcdr >> m_gpsAlive;
    dcdr >> m_logAlive;
    dcdr >> m_psuAlive;
    dcdr >> m_raiInAlive;
    dcdr >> m_raiOutAlive;
    dcdr >> m_sFusionAlive;
    dcdr >> m_uplinkAlive;
    dcdr >> m_alive;
}

/*!
 * @brief This function sets a value in member time
 * @param _time New value for member time
 */
void DataWatchdog::time(uint64_t _time)
{
m_time = _time;
}

/*!
 * @brief This function returns the value of member time
 * @return Value of member time
 */
uint64_t DataWatchdog::time() const
{
    return m_time;
}

/*!
 * @brief This function returns a reference to member time
 * @return Reference to member time
 */
uint64_t& DataWatchdog::time()
{
    return m_time;
}

/*!
 * @brief This function sets a value in member allAlive
 * @param _allAlive New value for member allAlive
 */
void DataWatchdog::allAlive(bool _allAlive)
{
m_allAlive = _allAlive;
}

/*!
 * @brief This function returns the value of member allAlive
 * @return Value of member allAlive
 */
bool DataWatchdog::allAlive() const
{
    return m_allAlive;
}

/*!
 * @brief This function returns a reference to member allAlive
 * @return Reference to member allAlive
 */
bool& DataWatchdog::allAlive()
{
    return m_allAlive;
}

/*!
 * @brief This function sets a value in member ahrsAlive
 * @param _ahrsAlive New value for member ahrsAlive
 */
void DataWatchdog::ahrsAlive(bool _ahrsAlive)
{
m_ahrsAlive = _ahrsAlive;
}

/*!
 * @brief This function returns the value of member ahrsAlive
 * @return Value of member ahrsAlive
 */
bool DataWatchdog::ahrsAlive() const
{
    return m_ahrsAlive;
}

/*!
 * @brief This function returns a reference to member ahrsAlive
 * @return Reference to member ahrsAlive
 */
bool& DataWatchdog::ahrsAlive()
{
    return m_ahrsAlive;
}

/*!
 * @brief This function sets a value in member airAlive
 * @param _airAlive New value for member airAlive
 */
void DataWatchdog::airAlive(bool _airAlive)
{
m_airAlive = _airAlive;
}

/*!
 * @brief This function returns the value of member airAlive
 * @return Value of member airAlive
 */
bool DataWatchdog::airAlive() const
{
    return m_airAlive;
}

/*!
 * @brief This function returns a reference to member airAlive
 * @return Reference to member airAlive
 */
bool& DataWatchdog::airAlive()
{
    return m_airAlive;
}

/*!
 * @brief This function sets a value in member ctrlAlive
 * @param _ctrlAlive New value for member ctrlAlive
 */
void DataWatchdog::ctrlAlive(bool _ctrlAlive)
{
m_ctrlAlive = _ctrlAlive;
}

/*!
 * @brief This function returns the value of member ctrlAlive
 * @return Value of member ctrlAlive
 */
bool DataWatchdog::ctrlAlive() const
{
    return m_ctrlAlive;
}

/*!
 * @brief This function returns a reference to member ctrlAlive
 * @return Reference to member ctrlAlive
 */
bool& DataWatchdog::ctrlAlive()
{
    return m_ctrlAlive;
}

/*!
 * @brief This function sets a value in member downlinkAlive
 * @param _downlinkAlive New value for member downlinkAlive
 */
void DataWatchdog::downlinkAlive(bool _downlinkAlive)
{
m_downlinkAlive = _downlinkAlive;
}

/*!
 * @brief This function returns the value of member downlinkAlive
 * @return Value of member downlinkAlive
 */
bool DataWatchdog::downlinkAlive() const
{
    return m_downlinkAlive;
}

/*!
 * @brief This function returns a reference to member downlinkAlive
 * @return Reference to member downlinkAlive
 */
bool& DataWatchdog::downlinkAlive()
{
    return m_downlinkAlive;
}

/*!
 * @brief This function sets a value in member gpsAlive
 * @param _gpsAlive New value for member gpsAlive
 */
void DataWatchdog::gpsAlive(bool _gpsAlive)
{
m_gpsAlive = _gpsAlive;
}

/*!
 * @brief This function returns the value of member gpsAlive
 * @return Value of member gpsAlive
 */
bool DataWatchdog::gpsAlive() const
{
    return m_gpsAlive;
}

/*!
 * @brief This function returns a reference to member gpsAlive
 * @return Reference to member gpsAlive
 */
bool& DataWatchdog::gpsAlive()
{
    return m_gpsAlive;
}

/*!
 * @brief This function sets a value in member logAlive
 * @param _logAlive New value for member logAlive
 */
void DataWatchdog::logAlive(bool _logAlive)
{
m_logAlive = _logAlive;
}

/*!
 * @brief This function returns the value of member logAlive
 * @return Value of member logAlive
 */
bool DataWatchdog::logAlive() const
{
    return m_logAlive;
}

/*!
 * @brief This function returns a reference to member logAlive
 * @return Reference to member logAlive
 */
bool& DataWatchdog::logAlive()
{
    return m_logAlive;
}

/*!
 * @brief This function sets a value in member psuAlive
 * @param _psuAlive New value for member psuAlive
 */
void DataWatchdog::psuAlive(bool _psuAlive)
{
m_psuAlive = _psuAlive;
}

/*!
 * @brief This function returns the value of member psuAlive
 * @return Value of member psuAlive
 */
bool DataWatchdog::psuAlive() const
{
    return m_psuAlive;
}

/*!
 * @brief This function returns a reference to member psuAlive
 * @return Reference to member psuAlive
 */
bool& DataWatchdog::psuAlive()
{
    return m_psuAlive;
}

/*!
 * @brief This function sets a value in member raiInAlive
 * @param _raiInAlive New value for member raiInAlive
 */
void DataWatchdog::raiInAlive(bool _raiInAlive)
{
m_raiInAlive = _raiInAlive;
}

/*!
 * @brief This function returns the value of member raiInAlive
 * @return Value of member raiInAlive
 */
bool DataWatchdog::raiInAlive() const
{
    return m_raiInAlive;
}

/*!
 * @brief This function returns a reference to member raiInAlive
 * @return Reference to member raiInAlive
 */
bool& DataWatchdog::raiInAlive()
{
    return m_raiInAlive;
}

/*!
 * @brief This function sets a value in member raiOutAlive
 * @param _raiOutAlive New value for member raiOutAlive
 */
void DataWatchdog::raiOutAlive(bool _raiOutAlive)
{
m_raiOutAlive = _raiOutAlive;
}

/*!
 * @brief This function returns the value of member raiOutAlive
 * @return Value of member raiOutAlive
 */
bool DataWatchdog::raiOutAlive() const
{
    return m_raiOutAlive;
}

/*!
 * @brief This function returns a reference to member raiOutAlive
 * @return Reference to member raiOutAlive
 */
bool& DataWatchdog::raiOutAlive()
{
    return m_raiOutAlive;
}

/*!
 * @brief This function sets a value in member sFusionAlive
 * @param _sFusionAlive New value for member sFusionAlive
 */
void DataWatchdog::sFusionAlive(bool _sFusionAlive)
{
m_sFusionAlive = _sFusionAlive;
}

/*!
 * @brief This function returns the value of member sFusionAlive
 * @return Value of member sFusionAlive
 */
bool DataWatchdog::sFusionAlive() const
{
    return m_sFusionAlive;
}

/*!
 * @brief This function returns a reference to member sFusionAlive
 * @return Reference to member sFusionAlive
 */
bool& DataWatchdog::sFusionAlive()
{
    return m_sFusionAlive;
}

/*!
 * @brief This function sets a value in member uplinkAlive
 * @param _uplinkAlive New value for member uplinkAlive
 */
void DataWatchdog::uplinkAlive(bool _uplinkAlive)
{
m_uplinkAlive = _uplinkAlive;
}

/*!
 * @brief This function returns the value of member uplinkAlive
 * @return Value of member uplinkAlive
 */
bool DataWatchdog::uplinkAlive() const
{
    return m_uplinkAlive;
}

/*!
 * @brief This function returns a reference to member uplinkAlive
 * @return Reference to member uplinkAlive
 */
bool& DataWatchdog::uplinkAlive()
{
    return m_uplinkAlive;
}

/*!
 * @brief This function sets a value in member alive
 * @param _alive New value for member alive
 */
void DataWatchdog::alive(bool _alive)
{
m_alive = _alive;
}

/*!
 * @brief This function returns the value of member alive
 * @return Value of member alive
 */
bool DataWatchdog::alive() const
{
    return m_alive;
}

/*!
 * @brief This function returns a reference to member alive
 * @return Reference to member alive
 */
bool& DataWatchdog::alive()
{
    return m_alive;
}


size_t DataWatchdog::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;

















    return current_align;
}

bool DataWatchdog::isKeyDefined()
{
   return false;
}

void DataWatchdog::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
     
     
     
     
     
     
     
     
     
     
}
